version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - TZ=Asia/Seoul
      - VUE_APP_BASE_URL=http://0.0.0.0:8000
    restart: always
    networks:
      - app-network

  backend:
    environment:
      - TZ=Asia/Seoul
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - db
    restart: always
    networks:
      - app-network

  db:
    image: postgres:15
    environment:
      - TZ=Asia/Seoul
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - TZ=Asia/Seoul
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    restart: always
    networks:
      - app-network

  celery:
      environment:
        - C_FORCE_ROOT=true
        - TZ=Asia/Seoul
      ipc: host
      build:
        context: ./backend
        dockerfile: Dockerfile.dev.celery
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./backend:/app
      depends_on:
        - rabbitmq
        - db
      deploy:
        resources:
          reservations:
            devices:
              - driver: nvidia
                count: "${GPU_COUNT:-all}"  # 사용자가 설정하지 않으면 모든 GPU 사용
                capabilities: [gpu]
      restart: always
      networks:
        - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
