version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
    networks:
      - web_network
    restart: always
    environment:
      - VUE_APP_BASE_URL=/api

  backend:
    environment:
      - CONDA_DEFAULT_ENV=snakemake
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    networks:
      - web_network
      - backend_network
    restart: always

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    restart: always

  rabbitmq:
    image: "rabbitmq:management"
    expose:
      - "15672"
      - "5672"
    networks:
      - backend_network
    restart: always

  celery-cpu:
    environment:
      - CONDA_DEFAULT_ENV=snakemake
      - C_FORCE_ROOT=true
      - TZ=Asia/Seoul
    ipc: host
    build:
      context: ./backend
      dockerfile: Dockerfile.prod.celery
    volumes:
      - ./backend:/app
    depends_on:
      - rabbitmq
      - db
    deploy:
      resources:
        limits:
          cpus: '44'
    restart: always
    command: bash -c "/opt/conda/envs/snakemake/bin/python -m celery -A app.main.celery worker -Q cpu_tasks -c 11 -n cpu_worker@%h --loglevel=info"

  celery-gpu:
    environment:
      - CONDA_DEFAULT_ENV=snakemake
      - C_FORCE_ROOT=true
      - TZ=Asia/Seoul
    ipc: host
    build:
      context: ./backend
      dockerfile: Dockerfile.prod.celery
    volumes:
      - ./backend:/app
    depends_on:
      - rabbitmq
      - db
    deploy:
      resources:
        limits:
          cpus: '7'
    restart: always
    command: bash -c "/opt/conda/envs/snakemake/bin/python -m celery -A app.main.celery worker -Q gpu_tasks -c 7 -n gpu_worker@%h --loglevel=info"

networks:
  web_network:
  backend_network:

volumes:
  postgres_data:
