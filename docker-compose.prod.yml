version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./frontend:/app
    networks:
      - web_network
    restart: always
    environment:
      - VUE_APP_BASE_URL=/api

  backend:
    environment:
      - CONDA_DEFAULT_ENV=snakemake
      - TZ=Asia/Seoul
      
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - web_network
      - backend_network
    restart: always

  db:
    image: postgres:15
    environment:
      - TZ=Asia/Seoul
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:management"
    environment:
      - TZ=Asia/Seoul
    expose:
      - "15672"
      - "5672"
    networks:
      - backend_network
    restart: always

  celery:
    environment:
      - CONDA_DEFAULT_ENV=snakemake
      - C_FORCE_ROOT=true
      - TZ=Asia/Seoul
    ipc: host
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    runtime: nvidia
    volumes:
      - ./backend:/app
    depends_on:
      - rabbitmq
      - db
    deploy:
      resources:
        limits:
          cpus: "34"
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: always
    networks:
      - backend_network

networks:
  web_network:
  backend_network:

volumes:
  postgres_data:
