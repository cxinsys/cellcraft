{"version":3,"file":"js/963.c437451f.js","mappings":"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","sources":["webpack://cellcraft-vue/./src/components/modals/Visualization.vue","webpack://cellcraft-vue/src/components/modals/Visualization.vue","webpack://cellcraft-vue/./src/components/modals/Visualization.vue?19c5","webpack://cellcraft-vue/./src/components/modals/Visualization.vue?e73b"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"layout\"}},[_c('div',{staticClass:\"plotly-layout\"},[_c('div',{ref:\"plotlyChart\",attrs:{\"id\":\"plotlyChart\"}})]),_c('div',{staticClass:\"options-layout\"},[_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"Method\")]),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedVisualizationTitle),expression:\"selectedVisualizationTitle\"}],staticClass:\"options__item--select\",on:{\"change\":[function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selectedVisualizationTitle=$event.target.multiple ? $$selectedVal : $$selectedVal[0]},function($event){return _vm.setSelectVisualization($event)}]}},_vm._l((_vm.visualizationList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.name}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_vm._l((_vm.selectedVisualizationParams),function(parameter,index){return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(parameter.type !== 'outputFile'),expression:\"parameter.type !== 'outputFile'\"}],key:index,staticClass:\"options__item\"},[(parameter.type === 'inputFile' && parameter.name.includes('target'))?_c('p',{staticClass:\"options__title\"},[_vm._v(\" Input File \")]):_c('p',{staticClass:\"options__title\"},[_vm._v(\" \"+_vm._s(parameter.name)+\" \")]),(parameter.type === 'inputFile' && parameter.name.includes('target'))?_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(parameter.defaultValue),expression:\"parameter.defaultValue\"}],staticClass:\"options__item--select\",on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.$set(parameter, \"defaultValue\", $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},_vm._l((_vm.resultFileConnectionList),function(resultFile,index){return _c('option',{key:index,domProps:{\"value\":resultFile.data.file.name}},[_vm._v(\" \"+_vm._s(resultFile.data.file.name)+\" \")])}),0):(parameter.type === 'inputFile')?_c('div',{staticClass:\"checkbox-wrapper-18 options__item--input\"},[_c('div',{staticClass:\"round\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.checkStatuses[parameter.defaultValue]),expression:\"checkStatuses[parameter.defaultValue]\"}],attrs:{\"type\":\"checkbox\",\"id\":\"checkbox-18\",\"disabled\":\"\"},domProps:{\"checked\":Array.isArray(_vm.checkStatuses[parameter.defaultValue])?_vm._i(_vm.checkStatuses[parameter.defaultValue],null)>-1:(_vm.checkStatuses[parameter.defaultValue])},on:{\"change\":function($event){var $$a=_vm.checkStatuses[parameter.defaultValue],$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(_vm.checkStatuses, parameter.defaultValue, $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(_vm.checkStatuses, parameter.defaultValue, $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(_vm.checkStatuses, parameter.defaultValue, $$c)}}}}),_c('label',{attrs:{\"for\":\"checkbox-18\"}})])]):_vm._e(),(parameter.type === 'int' || parameter.type === 'float')?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(parameter.defaultValue),expression:\"parameter.defaultValue\"}],staticClass:\"options__item--input\",attrs:{\"type\":\"number\",\"step\":parameter.defaultValue,\"min\":parameter.min,\"max\":parameter.max},domProps:{\"value\":(parameter.defaultValue)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(parameter, \"defaultValue\", $event.target.value)}}}):(parameter.type === 'boolean')?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(parameter.defaultValue),expression:\"parameter.defaultValue\"}],staticClass:\"options__item--input\",attrs:{\"type\":\"checkbox\"},domProps:{\"checked\":Array.isArray(parameter.defaultValue)?_vm._i(parameter.defaultValue,null)>-1:(parameter.defaultValue)},on:{\"change\":function($event){var $$a=parameter.defaultValue,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(parameter, \"defaultValue\", $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(parameter, \"defaultValue\", $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(parameter, \"defaultValue\", $$c)}}}}):(parameter.type === 'string')?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(parameter.defaultValue),expression:\"parameter.defaultValue\"}],staticClass:\"options__item--input\",attrs:{\"type\":\"text\"},domProps:{\"value\":(parameter.defaultValue)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(parameter, \"defaultValue\", $event.target.value)}}}):_vm._e()])}),_c('div',{staticClass:\"options__item\"},[_c('button',{attrs:{\"id\":\"reset-button\"},on:{\"click\":_vm.resetSelect}},[_vm._v(\"Reset\")]),_c('button',{class:{ 'failure': _vm.showFailure, 'success': _vm.showSuccess },attrs:{\"id\":\"apply-button\",\"disabled\":_vm.disableApplyButton || _vm.on_progress},on:{\"click\":_vm.runVisualization}},[(_vm.on_progress)?_c('p',[_c('span',{staticClass:\"button-loader\"}),_vm._v(\" Processing... \")]):(_vm.showFailure)?_c('p',[_vm._v(\" Failure... \")]):(_vm.showSuccess)?_c('p',[_vm._v(\" Visualization \")]):_c('p',[_vm._v(\" \"+_vm._s(_vm.disableApplyButton ? \"Select Applied\" : \"Select Apply \")+\" \")])])])],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div id=\"layout\">\n        <div class=\"plotly-layout\">\n            <div id=\"plotlyChart\" ref=\"plotlyChart\"></div>\n        </div>\n        <div class=\"options-layout\">\n            <div class=\"options__item\">\n                <p class=\"options__title\">Method</p>\n                <select class=\"options__item--select\" v-model=\"selectedVisualizationTitle\"\n                    @change=\"setSelectVisualization($event)\">\n                    <option v-for=\"(item, index) in visualizationList\" :key=\"index\" :value=\"item.name\">\n                        {{ item.name }}\n                    </option>\n                </select>\n            </div>\n            <div class=\"options__item\" v-for=\"(parameter, index) in selectedVisualizationParams\" :key=\"index\"\n                v-show=\"parameter.type !== 'outputFile'\">\n                <p class=\"options__title\" v-if=\"parameter.type === 'inputFile' && parameter.name.includes('target')\">\n                    Input File\n                </p>\n                <p class=\"options__title\" v-else>\n                    {{ parameter.name }}\n                </p>\n                <select class=\"options__item--select\" v-model=\"parameter.defaultValue\"\n                    v-if=\"parameter.type === 'inputFile' && parameter.name.includes('target')\">\n                    <option v-for=\"(resultFile, index) in resultFileConnectionList\" :key=\"index\"\n                        :value=\"resultFile.data.file.name\">\n                        {{ resultFile.data.file.name }}\n                    </option>\n                </select>\n                <div class=\"checkbox-wrapper-18 options__item--input\" v-else-if=\"parameter.type === 'inputFile'\">\n                    <div class=\"round\">\n                        <input type=\"checkbox\" id=\"checkbox-18\" v-model=\"checkStatuses[parameter.defaultValue]\"\n                            disabled />\n                        <label for=\"checkbox-18\"></label>\n                    </div>\n                </div>\n                <input type=\"number\" v-if=\"parameter.type === 'int' || parameter.type === 'float'\"\n                    class=\"options__item--input\" v-model=\"parameter.defaultValue\" :step=\"parameter.defaultValue\"\n                    :min=\"parameter.min\" :max=\"parameter.max\" />\n                <input type=\"checkbox\" v-else-if=\"parameter.type === 'boolean'\" class=\"options__item--input\"\n                    v-model=\"parameter.defaultValue\">\n                <input type=\"text\" v-else-if=\"parameter.type === 'string'\" class=\"options__item--input\"\n                    v-model=\"parameter.defaultValue\" />\n            </div>\n            <div class=\"options__item\">\n                <button id=\"reset-button\" @click=\"resetSelect\">Reset</button>\n                <button id=\"apply-button\" @click=\"runVisualization\" :disabled=\"disableApplyButton || on_progress\"\n                    :class=\"{ 'failure': showFailure, 'success': showSuccess }\">\n                    <p v-if=\"on_progress\">\n                        <span class=\"button-loader\"></span>\n                        Processing...\n                    </p>\n                    <p v-else-if=\"showFailure\">\n                        Failure...\n                    </p>\n                    <p v-else-if=\"showSuccess\">\n                        Visualization\n                    </p>\n                    <p v-else>\n                        {{ disableApplyButton ? \"Select Applied\" : \"Select Apply \" }}\n                    </p>\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { getPluginInfo, getResults, runVisualization, getVisualizationResult, createTaskEventSource } from \"@/api/index\";\nimport Plotly from \"plotly.js-dist-min\";\n\nexport default {\n    data() {\n        return {\n            workflowId: this.$route.query.workflow_id,\n            nodeId: this.$route.query.node,\n            algorithmId: null,\n            plotlyData: null, // Plotly 데이터를 저장\n            layout: {}, // Plotly 레이아웃 설정\n            selectedPlugin: \"\", // 선택된 플러그인\n            selectedVisualizationParams: [], // 선택된 각화 방법의 파라미터\n            selectedVisualizationTitle: \"\", // 선택된 시각화 방법 제목\n            visualizationList: [], // 시각화 방법 리스트\n            resultFileConnectionList: [], // 결과 연결 리스트\n            resultFileList: [], // 결과 파 리스트\n            checkStatuses: {}, // 각 파일 체크 상태를 저장\n            eventSources: {}, // EventSource 객체를 저장\n            disableApplyButton: false, // Apply 버튼 비활성화 여부\n            on_progress: false, // task 진행 중 여부\n            taskStatus: '', // 추가: task 상태 저장\n            showFailure: false, // 추가: 실패 메시지 표시 여부\n            showSuccess: false, // 추가: 성공 메시지 표시 여부\n        };\n    },\n    async mounted() {\n        try {\n            const current_node = this.$store.getters.getWorkflowNodeInfo(this.nodeId);\n            const connectionList = current_node.inputs.input_1.connections\n\n            const connectionAlgorithmNode = this.$store.getters.getAlgorithmNodeConnectedToInput(this.nodeId);\n            console.log(connectionAlgorithmNode);\n            this.algorithmId = connectionAlgorithmNode.id;\n\n            this.resultFileList = await this.checkResultFiles();\n\n            this.selectedPlugin = connectionAlgorithmNode.data.selectedPlugin.name;\n            const pluginInfo = await getPluginInfo(this.selectedPlugin);\n\n            // 1. pluginInfo에서 rules를 가져와서 isVisualization이 True인 것만 visualizationList에 저장\n            const pluginRules = Object.values(pluginInfo.data.plugin.rules);\n\n            const visualizationList = pluginRules.filter(rule => rule.isVisualization);\n            this.visualizationList = visualizationList;\n            console.log(this.visualizationList);\n\n            // 2. 결과 연결 리스트를 가져와서 resultFileConnectionList에 저장\n            // connectionList 순회하면서 getWorkflowNodeInfo(connectionItem.node) 실행한 결를 resultFileConnectionList에 저장\n            this.resultFileConnectionList = connectionList.map(connectionItem => {\n                return this.$store.getters.getWorkflowNodeInfo(connectionItem.node);\n            });\n\n            // 3. current_node의 data에서 title을 가져와서 visualizationList안에 존재한다면 selectedVisualization에 저장\n            const node_title = current_node.data.title;\n            const selectedVisualization = visualizationList.find(visualization => visualization.output[0] === node_title);\n\n\n            // 4. current_node의 data에서 selectedVisualizationParams와 selectedVisualizationTitle을 가져와서 저장\n            if (current_node.data[\"selectedVisualizationParams\"] && current_node.data[\"selectedVisualizationTitle\"]) {\n                this.selectedVisualizationParams = current_node.data[\"selectedVisualizationParams\"];\n                this.selectedVisualizationTitle = current_node.data[\"selectedVisualizationTitle\"];\n            } else if (selectedVisualization) {\n                this.selectedVisualizationParams = selectedVisualization.parameters\n                this.selectedVisualizationTitle = selectedVisualization.name;\n            } else {\n                this.selectedVisualizationParams = this.visualizationList[0].parameters\n                this.selectedVisualizationTitle = this.visualizationList[0].name;\n            }\n\n            // 5. checkStatuses 초기화\n            this.initializeCheckStatuses();\n\n            if (this.selectedVisualizationParams.length > 0) {\n                const dataObject = {\n                    \"selectedVisualizationParams\": this.selectedVisualizationParams,\n                };\n                const nodeId = this.nodeId;\n                this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId, dataObject });\n            }\n\n            if (this.selectedVisualizationTitle) {\n                const dataObject = {\n                    \"selectedVisualizationTitle\": this.selectedVisualizationTitle,\n                };\n                const nodeId = this.nodeId;\n                this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId, dataObject });\n            }\n\n            // 시각화 결과를 가져와서 plotlyData에 저장\n            // const response = await getVisualizationResult();\n            this.renderPlot();\n        } catch (error) {\n            console.error(error);\n        }\n    },\n    watch: {\n        selectedVisualizationParams: {\n            handler(newVal) {\n                if (newVal) {\n                    const dataObject = {\n                        \"selectedVisualizationParams\": newVal,\n                    };\n                    const nodeId = this.nodeId;\n                    this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId, dataObject });\n                }\n            },\n            deep: true,\n        },\n        selectedVisualizationTitle: {\n            handler(newVal) {\n                if (newVal) {\n                    const dataObject = {\n                        \"selectedVisualizationTitle\": newVal,\n                    };\n                    const nodeId = this.nodeId;\n                    this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId, dataObject });\n                }\n            },\n        },\n    },\n    beforeDestroy() {\n        // Close all the event source connections before the component is destroyed\n        for (let task_id in this.eventSources) {\n            this.closeEventSource(task_id);\n        }\n    },\n    methods: {\n        async runVisualization() {\n            try {\n                const title = this.$store.getters.getTitle;\n                const thumbnail = this.$store.getters.getThumbnail;\n                const workflow_info = this.$store.getters.getWorkflowInfo;\n                const workflow = {\n                    id: this.workflowId,\n                    algorithm_id: this.algorithmId,\n                    current_node_id: this.nodeId,\n                    title: title,\n                    thumbnail: thumbnail,\n                    workflow_info: workflow_info,\n                };\n                const workflow_data = await runVisualization(workflow);\n                console.log(workflow_data);\n\n                if (workflow_data.data.message === \"Visualization result already exists\") {\n                    const workflowResult = {\n                        id: this.workflowId,\n                        algorithm_id: this.algorithmId,\n                        filename: workflow_data.data.result_path,\n                    }\n                    const response = await getVisualizationResult(workflowResult);\n                    this.plotlyData = response.data;\n                    this.renderPlot();\n                    this.taskStatus = 'SUCCESS';\n                } else {\n                    this.createEventSource(workflow_data.data.task_id);\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        renderPlot() {\n            // plotlyData가 존재할 때만 렌더링 수행\n            if (this.plotlyData) {\n                Plotly.newPlot(this.$refs.plotlyChart, this.plotlyData.data, this.plotlyData.layout);\n            }\n        },\n        async resetSelect() {\n            try {\n                const pluginInfo = await getPluginInfo(this.selectedPlugin);\n                const pluginRules = Object.values(pluginInfo.data.plugin.rules);\n                const visualizationList = pluginRules.filter(rule => rule.isVisualization);\n                this.visualizationList = visualizationList;\n                const selectedVisualization = visualizationList.find(visualization => visualization.name === this.selectedVisualizationTitle);\n                this.selectedVisualizationParams = selectedVisualization.parameters\n\n                // plotly 랜더링 초기화\n                this.plotlyData = null;\n                this.renderPlot();\n            } catch (error) {\n                console.error(error);\n            }\n        },\n        createEventSource(task_id) {\n            this.on_progress = true;\n            this.taskStatus = '';\n            this.showFailure = false;\n\n            this.eventSources[task_id] = createTaskEventSource(task_id, {\n                onMessage: (event) => {\n                    console.log(\"Received update: \", event.data);\n                },\n                onComplete: (status) => {\n                    console.log(\"close\", status);\n                    if (status === 'FAILURE') {\n                        this.taskStatus = 'FAILURE';\n                        this.showFailure = true;\n                        setTimeout(() => {\n                            this.showFailure = false;\n                        }, 3000);\n                    } else if (status === 'SUCCESS') {\n                        this.taskStatus = 'SUCCESS';\n                        this.showSuccess = true;\n                    }\n                    this.on_progress = false;\n                    this.closeEventSource(task_id);\n                    clearInterval(this.timeInterval);\n                },\n                onError: (error) => {\n                    console.error(\"SSE Error:\", error);\n                    this.taskStatus = 'FAILURE';\n                    this.showFailure = true;\n                    setTimeout(() => {\n                        this.showFailure = false;\n                    }, 3000);\n                    this.on_progress = false;\n                    this.closeEventSource(task_id);\n                    clearInterval(this.timeInterval);\n                }\n            });\n        },\n        closeEventSource(task_id) {\n            // If the event source exists, close it\n            if (this.eventSources[task_id]) {\n                this.eventSources[task_id].close();\n                delete this.eventSources[task_id];\n            }\n        },\n        setSelectVisualization(event) {\n            const selectedVisualization = this.visualizationList.find(visualization => visualization.name === event.target.value);\n            this.selectedVisualizationParams = selectedVisualization.parameters\n            this.initializeCheckStatuses();\n            this.renderPlot();\n        },\n        setSelectInputFile(event) {\n            this.selectedInputFile = event.target.value;\n            this.renderPlot();\n        },\n        initializeCheckStatuses() {\n            if (Array.isArray(this.selectedVisualizationParams)) {\n                this.selectedVisualizationParams.forEach((parameter) => {\n                    if (parameter.type === 'inputFile' && !parameter.name.includes('target')) {\n                        console.log(parameter.defaultValue);\n\n                        this.checkStatuses[parameter.defaultValue] = this.resultFileList.some(resultFile => resultFile.name === parameter.defaultValue);\n                        console.log(this.resultFileList);\n\n                        this.disableApplyButton = !Object.values(this.checkStatuses).every(status => status);\n                    }\n                });\n            }\n        },\n        async checkResultFiles() {\n            const workflow_result = {\n                id: this.workflowId,\n                algorithm_id: this.algorithmId,\n            };\n            const response = await getResults(workflow_result);\n            const resultFiles = response.data;\n            console.log(resultFiles);\n\n            return resultFiles;\n        },\n    }\n}\n</script>\n\n<style scoped>\n#layout {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: row;\n    position: relative;\n}\n\n#plotlyChart {\n    width: 100%;\n    height: 100%;\n}\n\n.plotly-layout {\n    width: 70%;\n    height: 95%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    border-radius: 1rem;\n    margin: 1%;\n    box-sizing: border-box;\n    background-color: rgb(255, 255, 255);\n}\n\n.options-layout {\n    width: 30%;\n    height: 95%;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    gap: 0.5rem;\n    z-index: 9997;\n}\n\n.options__item {\n    width: 90%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    border-radius: 3px;\n    border-color: #f1f2fc;\n}\n\n.options__title {\n    padding: 0.5rem 0;\n    font-weight: 600;\n    color: rgb(55, 55, 55);\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.options__item--select,\n.options__item--input {\n    width: 8rem;\n    padding: 0.5rem;\n    border-radius: 8px;\n    border-color: #e7eaff;\n    color: #545454;\n}\n\n.options__item--input {\n    width: 7rem;\n    border: none;\n    display: flex;\n    justify-content: center;\n}\n\n.options__item--select:focus,\n.options__item--input:focus {\n    outline: none;\n}\n\n.checkbox-wrapper-18 .round {\n    position: relative;\n}\n\n.checkbox-wrapper-18 .round label {\n    background-color: #fff;\n    border: 1px solid #ccc;\n    border-radius: 50%;\n    cursor: pointer;\n    height: 28px;\n    width: 28px;\n    display: block;\n}\n\n.checkbox-wrapper-18 .round label:after {\n    border: 2px solid #fff;\n    border-top: none;\n    border-right: none;\n    content: \"\";\n    height: 6px;\n    left: 8px;\n    opacity: 0;\n    position: absolute;\n    top: 9px;\n    transform: rotate(-45deg);\n    width: 12px;\n}\n\n.checkbox-wrapper-18 .round input[type=\"checkbox\"] {\n    visibility: hidden;\n    display: none;\n    opacity: 0;\n}\n\n.checkbox-wrapper-18 .round input[type=\"checkbox\"]:checked+label {\n    background-color: #66bb6a;\n    border-color: #66bb6a;\n}\n\n.checkbox-wrapper-18 .round input[type=\"checkbox\"]:checked+label:after {\n    opacity: 1;\n}\n\n#apply-button {\n    background-color: #2d2fbf;\n    /* 버튼 배경색 */\n    width: 9rem;\n    height: 2.5rem;\n    color: white;\n    /* 글자색 */\n    padding: 10px 0px;\n    /* 상하 10px, 좌우 20px의 여백 */\n    border: none;\n    /* 테두리 없앰 */\n    border-radius: 4px;\n    /* 테두리 모서리 둥글게 */\n    cursor: pointer;\n    /* 마우스 오버 시 커서 변경 */\n    font-size: 16px;\n    /* 글자 크기 */\n    transition: background-color 0.3s;\n    /* 배경색 변경시 트랜지션 효과 */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#apply-button:hover {\n    background-color: #4655ff;\n    /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n#apply-button:disabled {\n    background-color: #ccc;\n    /* 비활성화 상태의 배경색 */\n    color: #666;\n    /* 비활성화 상태의 글자색 */\n    cursor: not-allowed;\n    /* 비활성화 상태에서의 커서 */\n}\n\n#reset-button {\n    background-color: #616161;\n    /* 버튼 배경색 */\n    width: 4rem;\n    height: 2.5rem;\n    color: white;\n    /* 글자색 */\n    padding: 10px 0px;\n    /* 상하 10px, 좌우 20px의 여백 */\n    border: none;\n    /* 테두리 없앰 */\n    border-radius: 4px;\n    /* 테두리 모서리 둥글게 */\n    cursor: pointer;\n    /* 마우스 오버 시 커서 변경 */\n    font-size: 16px;\n    /* 글자 크기 */\n    transition: background-color 0.3s;\n    /* 배경색 변경시 트랜지션 효과 */\n    margin-right: 0.5rem;\n}\n\n#reset-button:hover {\n    background-color: #797979;\n    /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n.loading-animation {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    padding: 1rem;\n    border-radius: 8px;\n    z-index: 9999;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n}\n\n.loader {\n    width: 48px;\n    height: 48px;\n    border: 5px solid #FFF;\n    border-bottom-color: transparent;\n    border-radius: 50%;\n    margin-bottom: 0.5rem;\n    display: inline-block;\n    box-sizing: border-box;\n    animation: rotation 1s linear infinite;\n}\n\n.loading-animation p {\n    margin: 0;\n    color: #fff;\n}\n\n.button-loader {\n    width: 16px;\n    height: 16px;\n    border: 2px solid #FFF;\n    border-bottom-color: transparent;\n    border-radius: 50%;\n    display: inline-block;\n    margin-right: 8px;\n    animation: rotation 1s linear infinite;\n}\n\n@keyframes rotation {\n    0% {\n        transform: rotate(0deg);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n#apply-button.failure {\n    background-color: #ff4444;\n    transition: background-color 0.3s ease;\n}\n\n#apply-button.success {\n    background-color: #66bb6a;\n    transition: background-color 0.3s ease;\n}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Visualization.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Visualization.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Visualization.vue?vue&type=template&id=5542a862&scoped=true\"\nimport script from \"./Visualization.vue?vue&type=script&lang=js\"\nexport * from \"./Visualization.vue?vue&type=script&lang=js\"\nimport style0 from \"./Visualization.vue?vue&type=style&index=0&id=5542a862&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"5542a862\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","staticClass","ref","_v","directives","name","rawName","value","selectedVisualizationTitle","expression","on","$event","$$selectedVal","Array","prototype","filter","call","target","options","o","selected","map","val","_value","multiple","setSelectVisualization","_l","visualizationList","item","index","key","domProps","_s","selectedVisualizationParams","parameter","type","includes","defaultValue","$set","resultFileConnectionList","resultFile","data","file","checkStatuses","isArray","_i","$$a","$$el","$$c","checked","$$v","$$i","concat","slice","_e","min","max","composing","resetSelect","class","showFailure","showSuccess","disableApplyButton","on_progress","runVisualization","staticRenderFns","workflowId","$route","query","workflow_id","nodeId","node","algorithmId","plotlyData","layout","selectedPlugin","resultFileList","eventSources","taskStatus","mounted","current_node","$store","getters","getWorkflowNodeInfo","connectionList","inputs","input_1","connections","connectionAlgorithmNode","getAlgorithmNodeConnectedToInput","console","log","id","checkResultFiles","pluginInfo","getPluginInfo","pluginRules","Object","values","plugin","rules","rule","isVisualization","connectionItem","node_title","title","selectedVisualization","find","visualization","output","parameters","initializeCheckStatuses","length","dataObject","commit","renderPlot","error","watch","handler","newVal","deep","beforeDestroy","task_id","closeEventSource","methods","getTitle","thumbnail","getThumbnail","workflow_info","getWorkflowInfo","workflow","algorithm_id","current_node_id","workflow_data","message","workflowResult","filename","result_path","response","getVisualizationResult","createEventSource","Plotly","$refs","plotlyChart","createTaskEventSource","onMessage","event","onComplete","status","setTimeout","clearInterval","timeInterval","onError","close","setSelectInputFile","selectedInputFile","forEach","some","every","workflow_result","getResults","resultFiles","component"],"sourceRoot":""}