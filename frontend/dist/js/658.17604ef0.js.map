{"version":3,"file":"js/658.17604ef0.js","mappings":"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","sources":["webpack://cellcraft-vue/./src/components/modals/heatMap.vue","webpack://cellcraft-vue/src/components/modals/heatMap.vue","webpack://cellcraft-vue/./src/components/modals/heatMap.vue?6b88","webpack://cellcraft-vue/./src/components/modals/heatMap.vue?0143"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"layout\"}},[_c('div',{staticClass:\"plotly-layout\"},[_c('div',{attrs:{\"id\":\"plotly-heatmap\"}}),(_vm.isLoading)?_c('div',{staticClass:\"loading-layout\"},[_c('span')]):(_vm.errorOccured)?_c('div',[_c('span',[_vm._v(\" SOME ERROR OCCURED\")])]):(!_vm.plotReady)?_c('div',[_c('span',[_vm._v(\" NO DATA FOR HEATMAP\")])]):_vm._e()]),_c('div',{staticClass:\"options-layout\"},[_c('div',{staticClass:\"options__item\"},[_vm._v(\" sif  \"),_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedSif),expression:\"selectedSif\"}],staticClass:\"options__item__select\",on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.selectedSif=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},_vm._l((_vm.resultSifs),function(sif){return _c('option',{key:sif,domProps:{\"value\":sif}},[_vm._v(\" \"+_vm._s(_vm._f(\"splitUnderScore\")(sif))+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Degree  \"),_c('select',{staticClass:\"options__item__select\",on:{\"change\":function($event){return _vm.setSelectedDegree($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_c('button',{attrs:{\"id\":\"apply-button\"},on:{\"click\":_vm.applySelect}},[_vm._v(\" \"+_vm._s(\"Select Apply \")+\" \")])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"layout\">\n    <div class=\"plotly-layout\">\n      <div id=\"plotly-heatmap\"></div>\n      <div v-if=\"isLoading\" class=\"loading-layout\">\n        <span> </span>\n      </div>\n      <div v-else-if=\"errorOccured\">\n        <span> SOME ERROR OCCURED</span>\n      </div>\n      <div v-else-if=\"!plotReady\">\n        <span> NO DATA FOR HEATMAP</span>\n      </div>\n    </div>\n    <div class=\"options-layout\">\n      <div class=\"options__item\">\n        sif&nbsp;\n        <select class=\"options__item__select\" v-model=\"selectedSif\">\n          <option v-for=\"sif in resultSifs\" :key=\"sif\" :value=\"sif\">\n            {{ sif | splitUnderScore }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        Degree&nbsp;\n        <select\n          class=\"options__item__select\"\n          @change=\"setSelectedDegree($event)\"\n        >\n          <option\n            v-for=\"(item, index) in numList\"\n            :key=\"index\"\n            :value=\"item.value\"\n          >\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        <button id=\"apply-button\" @click=\"applySelect\">\n          {{ \"Select Apply \" }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getResultFileOne, getResultFile } from \"@/api/index\";\n// Importing the Plotly library\nimport Plotly from \"plotly.js-dist-min\";\n\nexport default {\n  data() {\n    return {\n      selectedDegree: 0,\n      numList: [\n        { name: \"Indegree\", value: 0 },\n        { name: \"Outdegree\", value: 2 },\n      ],\n      p_min: -7,\n      p_max: 7,\n      resultSifs: [],\n      selectedSif: \"\",\n      current_file: \"\",\n      expression_file: \"\",\n      pseudo_time_file: \"\",\n      cell_select_file: \"\",\n      plotReady: false,\n      isLoading: false,\n      errorOccured: false,\n    };\n  },\n  name: \"PlotlyHeatMap\",\n\n  async mounted() {\n    // option_file_name.algorithmOptions.optionFilePath이 null이면 error 띄우기\n    const option_file_name = this.$store.getters.getCurrentLinkedNodes;\n    console.log(option_file_name[0].algorithmOptions.optionFilePath);\n\n    try {\n      this.current_file = this.filterAndAddSuffix(\n        this.$store.getters.getCurrentFile.file\n      );\n      const result = await getResultFile({\n        file_name: this.current_file,\n        option_file_name: option_file_name[0].algorithmOptions.optionFilePath,\n      });\n      const resultsList = result.data.result_files;\n      console.log(resultsList);\n      // resultsList에서 .sif 파일만 추출\n      // 추출할 때, \"_\"로 구분된 문자열을 배열로 변환하여 마지막 요소만 추출\n      // 마지막 요소가 \"sif\"인지 확인\n      // \"sif\"이면 배열을 문자열로 변환하여 resultSifs에 추가\n      for (var i = 0; i < resultsList.length; i++) {\n        const segments = resultsList[i].split(\"_\");\n        // segments 문자열 안에 sif가 포함되어 있으면 segments[segments.length - 1] push\n        if (segments[segments.length - 1].includes(\"sif\")) {\n          this.resultSifs.push(resultsList[i]);\n        }\n      }\n\n      // resultSifs에서 trimIndirect가 포함된 파일명 this.selectedSif에 할당\n      for (i = 0; i < this.resultSifs.length; i++) {\n        if (this.resultSifs[i].includes(\"trimIndirect\")) {\n          this.selectedSif = this.resultSifs[i];\n        }\n      }\n\n      // expMatrix, pseudotime, cellSelect가 포함된 파일명 추출\n      // 그냥 resultsList에서 순회하면서 해당 문자열이 포함된 파일명을 찾아서\n      // this.expression_file, this.pseudo_time_file, this.cell_select_file에 할당\n      for (i = 0; i < resultsList.length; i++) {\n        if (resultsList[i].includes(\"expMatrix\")) {\n          this.expression_file = resultsList[i];\n          console.log(this.expression_file);\n        } else if (resultsList[i].includes(\"pseudotime\")) {\n          this.pseudo_time_file = resultsList[i];\n          console.log(this.pseudo_time_file);\n        } else if (resultsList[i].includes(\"cellSelect\")) {\n          this.cell_select_file = resultsList[i];\n          console.log(this.cell_select_file);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  filters: {\n    // 문자열 안에 \"_\"가 포함되어 있으면 \"_\"로 구분된 문자열을 중 마지막 요소를만 반환\n    // \"_\"가 포함되어 있지 않으면 원래 문자열 반환\n    splitUnderScore(inputString) {\n      // Check if the inputString contains an underscore\n      if (inputString.includes(\"_\")) {\n        // \"_\"로 구분된 문자열을 배열로 변환\n        const segments = inputString.split(\"_\");\n        // 마지막 요소를 반환\n        const fileName = segments[segments.length - 1];\n        return fileName;\n      }\n      // If no underscore found, return the original string\n      return inputString;\n    },\n  },\n  methods: {\n    filterAndAddSuffix(inputString) {\n      // Check if the inputString contains an underscore\n      if (inputString.includes(\"_\")) {\n        // \"_\"로 구분된 문자열을 배열로 변환\n        const segments = inputString.split(\"_\");\n        // 마지막 두 요소를 제외한 나머지를 합침\n        const fileName = segments.slice(0, -2).join(\"_\") + \".h5ad\";\n        return fileName;\n      }\n      // If no underscore found, return the original string\n      return inputString;\n    },\n    async applySelect() {\n      this.isLoading = true;\n      await this.updatePlot();\n      this.isLoading = false;\n    },\n    async updatePlot() {\n      try {\n        // ---- y축 ------\n        const algorithmResult = await getResultFileOne(this.selectedSif);\n        // 줄바꿈 문자(\"\\n\")를 기준으로 문자열을 분할하여 각 라인을 배열로 변환\n        let lines = algorithmResult.data.split(\"\\n\");\n\n        // 각 라인을 탭 문자(\"\\t\")를 기준으로 분할하여 2차원 배열 생성\n        var twoDimensionalList = lines.map(function (line) {\n          return line.split(\"\\t\");\n        });\n\n        // 결과 출력 (옵션)\n\n        var frequencyMap = {};\n        const tmpDegree = this.selectedDegree;\n        twoDimensionalList.forEach(function (row) {\n          var element = row[tmpDegree]; // 첫 번째 열의 요소\n          // 해당 요소가 frequencyMap에 이미 존재하면 카운트 증가, 없으면 1로 초기화\n          if (frequencyMap[element]) {\n            frequencyMap[element]++;\n          } else {\n            frequencyMap[element] = 1;\n          }\n        });\n\n        if (Object.prototype.hasOwnProperty.call(frequencyMap, \"\")) {\n          delete frequencyMap[\"\"];\n        }\n\n        // 결과 출력 (옵션)\n\n        // 객체를 키-값 쌍의 배열로 변환\n        var items = Object.keys(frequencyMap).map(function (key) {\n          return [key, frequencyMap[key]];\n        });\n\n        // 배열을 값(value)에 따라 내림차순으로 정렬\n        items.sort(function (first, second) {\n          return first[1] - second[1];\n        });\n\n        // 정렬된 배열을 다시 객체로 변환 (선택적)\n        var sortedFrequencyMap = {};\n        items.forEach(function (item) {\n          sortedFrequencyMap[item[0]] = item[1];\n        });\n\n        //sortedFrequencyMap에 key가 undefined인 요소가 있으면 삭제\n        if (\n          Object.prototype.hasOwnProperty.call(sortedFrequencyMap, \"undefined\")\n        ) {\n          delete sortedFrequencyMap[\"undefined\"];\n        }\n\n        // 결과 출력\n        // ---- y축 ------ 끝\n\n        // ---- z ------\n        const expressionResult = await getResultFileOne(this.expression_file);\n\n        var expressionLines = expressionResult.data.split(\"\\n\");\n\n        // 각 라인을 탭 문자(\"\\t\")를 기준으로 분할하여 2차원 배열 생성\n        var expressionTwoDimensionalList = expressionLines.map(function (line) {\n          return line.split(\",\");\n        });\n\n        // 결과 출력 (옵션)\n\n        const pseudoTimeResult = await getResultFileOne(this.pseudo_time_file);\n        const pseudoTimes = pseudoTimeResult.data.split(\"\\n\");\n\n        for (var i = 0; i < pseudoTimes.length; i++) {\n          expressionTwoDimensionalList[i].push(pseudoTimes[i]);\n        }\n\n        const cellSelectResult = await getResultFileOne(this.cell_select_file);\n        const cellSelect = cellSelectResult.data.split(\"\\r\\n\");\n\n        // 새로운 2차원 배열 생성\n        var filteredExpressionList = [];\n        var expressionFirstRow = expressionTwoDimensionalList[0];\n        // expressionTwoDimensionalList를 순회하면서\n        // cellSelect에서 해당 인덱스가 \"1\"인 행만 새 배열에 추가\n        for (i = 0; i < expressionTwoDimensionalList.length; i++) {\n          if (cellSelect[i] === \"1\") {\n            filteredExpressionList.push(expressionTwoDimensionalList[i + 1]);\n          }\n        }\n\n        filteredExpressionList.sort(function (a, b) {\n          // 각 행의 마지막 요소를 비교하여 정렬\n          return a[a.length - 1] - b[b.length - 1];\n        });\n\n        var zMatrix = [];\n\n        for (i = 0; i < Object.keys(sortedFrequencyMap).length; i++) {\n          var cellIndex = expressionFirstRow.indexOf(\n            Object.keys(sortedFrequencyMap)[i]\n          );\n          var row = [];\n          for (var j = 0; j < filteredExpressionList.length; j++) {\n            row.push(filteredExpressionList[j][cellIndex + 1]);\n          }\n          zMatrix.push(this.localRegression(row));\n        }\n        console.log(Object.keys(sortedFrequencyMap));\n        console.log(zMatrix);\n        // Data for the bar plot\n        const data = [\n          {\n            // x: items.map((item) => item[1]),\n            // y: items.map((item) => item[0]),\n            // z: items.map((item) => item[1]),\n            // x: [1, 2, 3],\n            y: Object.keys(sortedFrequencyMap),\n            z: zMatrix, // Heatmap values\n            type: \"heatmap\",\n            orientation: \"h\",\n          },\n        ];\n\n        // Layout configuration\n        const layout = {\n          // title: \"Simple Bar Plot\",\n          // xaxis: {\n          //   title: \"Categories\",\n          // },\n          // yaxis: {\n          //   title: \"Values\",\n          // },\n          width: 600, // !--조정필요\n          height: 570, // !--조정필요\n        };\n        const config = {\n          responsive: true,\n          scrollZoom: true,\n          displayModeBar: true,\n          displaylogo: false,\n        };\n        // Rendering the bar plot\n        Plotly.newPlot(\"plotly-heatmap\", data, layout, config);\n        this.plotReady = true;\n      } catch (error) {\n        this.plotReady = false;\n        this.errorOccured = true;\n        console.log(error);\n      }\n      console.log(\n        111,\n        this.selectedSif,\n        222,\n        this.current_file,\n        333,\n        this.expression_file,\n        444,\n        this.pseudo_time_file,\n        555,\n        this.cell_select_file\n      );\n    },\n    async setSelectedDegree(event) {\n      this.selectedDegree = event.target.value;\n      if (typeof this.selectedDegree === \"string\") {\n        this.selectedDegree = parseInt(this.selectedDegree);\n      }\n    },\n    localRegression(data, bandwidth = 75) {\n      const n = data.length;\n      const smoothedData = [];\n\n      for (let i = 0; i < n; i++) {\n        let weightedSum = 0;\n        let weightSum = 0;\n\n        for (\n          let j = Math.max(0, i - bandwidth);\n          j < Math.min(n, i + bandwidth + 1);\n          j++\n        ) {\n          const weight = 1; // 간단한 예시로 가중치를 1로 고정\n          weightedSum += data[j] * weight;\n          weightSum += weight;\n        }\n\n        const smoothedValue = weightedSum / weightSum;\n        smoothedData.push(smoothedValue);\n      }\n      const nowMax = Math.max(...smoothedData);\n      const nowMin = Math.min(...smoothedData);\n      const nowDiff = nowMax - nowMin;\n      let multipliedArray = smoothedData.map(\n        (element) =>\n          (element - (nowMax + nowMin) / 2) *\n            ((this.p_max - this.p_min) / nowDiff / 10) +\n          (this.p_max + this.p_min) / 20\n      );\n      return multipliedArray;\n    },\n    pMinMinus() {\n      if (this.p_min <= -7) {\n        return;\n      }\n      this.p_min -= 1;\n      this.updatePlot(this.selectedDegree);\n    },\n    pMinPlus() {\n      if (this.p_min >= -1) {\n        return;\n      }\n      this.p_min += 1;\n      this.updatePlot(this.selectedDegree);\n    },\n    pMaxMinus() {\n      if (this.p_max <= 1) {\n        return;\n      }\n      this.p_max -= 1;\n      this.updatePlot(this.selectedDegree);\n    },\n    pMaxPlus() {\n      if (this.p_max >= 7) {\n        return;\n      }\n      this.p_max += 1;\n      this.updatePlot(this.selectedDegree);\n    },\n  },\n};\n</script>\n\n<style scoped>\n#layout {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n.plotly-layout {\n  width: 70%;\n  height: 95%;\n  /* background-color: blue; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 2.5%;\n  border-radius: 1rem;\n  box-sizing: border-box;\n  background-color: rgb(255, 255, 255);\n}\n.options-layout {\n  width: 25%;\n  height: 95%;\n  padding-right: 1%;\n  /* background-color: red; */\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  flex-direction: column;\n  z-index: 9997;\n}\n.options__textInput {\n  color: black;\n  padding: 5px;\n  left: 10px;\n  border-radius: 10px;\n  border-color: #e7eaff;\n  font-size: medium;\n  text-align: center;\n  margin-bottom: 5px;\n}\n.options__item {\n  /* margin: auto; */\n  font-weight: 600;\n  color: rgb(55, 55, 55);\n  /* padding: 2% 0; */\n  left: 10px;\n  margin-top: 15px;\n  text-transform: capitalize;\n}\n.options__item__select {\n  position: absolute;\n  margin-top: -10px;\n  right: 10px;\n  padding: 5px;\n  border-radius: 8px;\n  width: 140px;\n  border-color: #e7eaff;\n  color: #545454;\n}\n.options__item__button__minus {\n  position: absolute;\n  margin-top: -3px;\n  right: 90px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__button__plus {\n  position: absolute;\n  margin-top: -3px;\n  right: 19px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__degree {\n  position: absolute;\n  right: 50px;\n}\nbutton {\n  background-color: #ffffff;\n  border: 1px solid #999999;\n  border-radius: 0.3rem;\n  color: #333333;\n  /* font-size: 1rem;\n  padding: 0.2rem 1rem; */\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.3s ease;\n  margin: 0.2rem 0.1rem;\n}\n\nbutton:hover {\n  background-color: #e7eaff;\n  border-color: #b3b3b3;\n}\n/* The switch - the box around the slider_button */\n.switch {\n  position: absolute;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n  margin-top: -5px;\n  right: 10px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider_button */\n.slider_button {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider_button:before {\n  position: absolute;\n  content: \"\";\n  height: 15px;\n  width: 15px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked + .slider_button {\n  background-color: #53b2ff;\n}\n\ninput:focus + .slider_button {\n  box-shadow: 0 0 1px #53b2ff;\n}\n\ninput:checked + .slider_button:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded slider_buttons */\n.slider_button.round {\n  border-radius: 34px;\n}\n\n.slider_button.round:before {\n  border-radius: 50%;\n}\n\n.downloadPlot_button {\n  position: absolute;\n  /* top: -0.2rem; */\n  right: 1.5rem;\n  margin-top: -0.2rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  opacity: 0.8;\n}\n.downloadPlot_button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n#apply-button {\n  background-color: #2d2fbf; /* 버튼 배경색 */\n  width: 13.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#apply-button:hover {\n  background-color: #4655ff; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n#apply-button:disabled {\n  background-color: #ccc; /* 비활성화 상태의 배경색 */\n  color: #666; /* 비활성화 상태의 글자색 */\n  cursor: not-allowed; /* 비활성화 상태에서의 커서 */\n}\n\n#reset-button {\n  background-color: #616161; /* 버튼 배경색 */\n  width: 3.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  /* margin-left: 10px; */\n  margin-right: 0.5rem;\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#reset-button:hover {\n  background-color: #797979; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n.loading-layout {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.loading-layout span {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  animation: spin 2s linear infinite;\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./heatMap.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./heatMap.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./heatMap.vue?vue&type=template&id=6f640296&scoped=true\"\nimport script from \"./heatMap.vue?vue&type=script&lang=js\"\nexport * from \"./heatMap.vue?vue&type=script&lang=js\"\nimport style0 from \"./heatMap.vue?vue&type=style&index=0&id=6f640296&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6f640296\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","staticClass","isLoading","errorOccured","_v","plotReady","_e","directives","name","rawName","value","selectedSif","expression","on","$event","$$selectedVal","Array","prototype","filter","call","target","options","o","selected","map","val","_value","multiple","_l","resultSifs","sif","key","domProps","_s","_f","setSelectedDegree","numList","item","index","applySelect","staticRenderFns","data","selectedDegree","p_min","p_max","current_file","expression_file","pseudo_time_file","cell_select_file","mounted","option_file_name","$store","getters","getCurrentLinkedNodes","console","log","algorithmOptions","optionFilePath","filterAndAddSuffix","getCurrentFile","file","result","getResultFile","file_name","resultsList","result_files","i","length","segments","split","includes","push","error","filters","splitUnderScore","inputString","fileName","methods","slice","join","updatePlot","algorithmResult","getResultFileOne","lines","twoDimensionalList","line","frequencyMap","tmpDegree","forEach","row","element","Object","hasOwnProperty","items","keys","sort","first","second","sortedFrequencyMap","expressionResult","expressionLines","expressionTwoDimensionalList","pseudoTimeResult","pseudoTimes","cellSelectResult","cellSelect","filteredExpressionList","expressionFirstRow","a","b","zMatrix","cellIndex","indexOf","j","localRegression","y","z","type","orientation","layout","width","height","config","responsive","scrollZoom","displayModeBar","displaylogo","Plotly","event","parseInt","bandwidth","n","smoothedData","weightedSum","weightSum","Math","max","min","weight","smoothedValue","nowMax","nowMin","nowDiff","multipliedArray","pMinMinus","pMinPlus","pMaxMinus","pMaxPlus","component"],"sourceRoot":""}