{"version":3,"file":"js/365.83d4819e.js","mappings":"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","sources":["webpack://cellcraft-vue/./src/components/modals/scatterPlot.vue","webpack://cellcraft-vue/src/components/modals/scatterPlot.vue","webpack://cellcraft-vue/./src/components/modals/scatterPlot.vue?78c1","webpack://cellcraft-vue/./src/components/modals/scatterPlot.vue?2957"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"layout\"}},[_vm._m(0),(!_vm.refreshOptionsLayout)?_c('div',{staticClass:\"options-layout\"},[_c('input',{staticClass:\"options__textInput\",attrs:{\"type\":\"text\",\"placeholder\":\"Title\"},on:{\"input\":function($event){return _vm.titleChangeFunc($event)}}}),_c('div',{staticClass:\"options__item\"},[_vm._v(\" X - axis  \"),_c('select',{staticClass:\"options__item__select\",domProps:{\"value\":_vm.selectedX},on:{\"change\":function($event){return _vm.setSelectX($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Y - axis  \"),_c('select',{staticClass:\"options__item__select\",domProps:{\"value\":_vm.selectedY},on:{\"change\":function($event){return _vm.setSelectY($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Group  \"),_c('select',{staticClass:\"options__item__select\",domProps:{\"value\":_vm.selectedCluster},on:{\"change\":function($event){return _vm.setSelectCluster($event)}}},_vm._l((_vm.clusterList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Marker Size  \"),_c('img',{staticClass:\"options__item__button__minus\",attrs:{\"src\":require(\"@/assets/button_minus.png\"),\"alt\":\"-\"},on:{\"click\":_vm.markerSizeMinus}}),_c('label',{staticClass:\"options__item__degree\"},[_vm._v(_vm._s(_vm.markerSize))]),_c('img',{staticClass:\"options__item__button__plus\",attrs:{\"src\":require(\"@/assets/button_plus.png\"),\"alt\":\"-\"},on:{\"click\":_vm.markerSizePlus}})]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Download Plot Image  \"),_c('img',{staticClass:\"downloadPlot_button\",attrs:{\"src\":require(\"@/assets/download.png\"),\"alt\":\"Save Plot\"},on:{\"click\":_vm.downloadPlot}})]),_c('div',{staticClass:\"options__item\"},[_c('button',{attrs:{\"id\":\"reset-button\"},on:{\"click\":_vm.resetSelect}},[_vm._v(\"reset\")]),_c('button',{attrs:{\"id\":\"apply-button\",\"disabled\":_vm.disableApplyButton},on:{\"click\":_vm.cellselect}},[_vm._v(\" \"+_vm._s(_vm.disableApplyButton ? \"Select Applied\" : \"Select Apply \")+\" \")])])]):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"plotly-layout\"},[_c('div',{attrs:{\"id\":\"plotly__scatter\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"layout\">\n    <div class=\"plotly-layout\">\n      <div id=\"plotly__scatter\"></div>\n    </div>\n    <div class=\"options-layout\" v-if=\"!refreshOptionsLayout\">\n      <input\n        type=\"text\"\n        placeholder=\"Title\"\n        class=\"options__textInput\"\n        @input=\"titleChangeFunc($event)\"\n      />\n      <div class=\"options__item\">\n        X - axis&nbsp;\n        <select\n          class=\"options__item__select\"\n          :value=\"selectedX\"\n          @change=\"setSelectX($event)\"\n        >\n          <option\n            v-for=\"(item, index) in numList\"\n            :key=\"index\"\n            :value=\"item.value\"\n          >\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        Y - axis&nbsp;\n        <select\n          class=\"options__item__select\"\n          :value=\"selectedY\"\n          @change=\"setSelectY($event)\"\n        >\n          <option\n            v-for=\"(item, index) in numList\"\n            :key=\"index\"\n            :value=\"item.value\"\n          >\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        Group&nbsp;\n        <select\n          class=\"options__item__select\"\n          :value=\"selectedCluster\"\n          @change=\"setSelectCluster($event)\"\n        >\n          <option\n            v-for=\"(item, index) in clusterList\"\n            :key=\"index\"\n            :value=\"item.value\"\n          >\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"options__item\">\n        Marker Size&nbsp;\n        <img\n          class=\"options__item__button__minus\"\n          src=\"@/assets/button_minus.png\"\n          alt=\"-\"\n          v-on:click=\"markerSizeMinus\"\n        />\n        <label class=\"options__item__degree\">{{ markerSize }}</label>\n        <img\n          class=\"options__item__button__plus\"\n          src=\"@/assets/button_plus.png\"\n          alt=\"-\"\n          v-on:click=\"markerSizePlus\"\n        />\n      </div>\n      <div class=\"options__item\">\n        Download Plot Image&nbsp;\n        <img\n          class=\"downloadPlot_button\"\n          src=\"@/assets/download.png\"\n          alt=\"Save Plot\"\n          @click=\"downloadPlot\"\n        />\n      </div>\n      <div class=\"options__item\">\n        <button id=\"reset-button\" @click=\"resetSelect\">reset</button>\n        <button\n          id=\"apply-button\"\n          @click=\"cellselect\"\n          :disabled=\"disableApplyButton\"\n        >\n          {{ disableApplyButton ? \"Select Applied\" : \"Select Apply \" }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getResult } from \"@/api/index\";\nimport Plotly from \"plotly.js-dist-min\";\n\nexport default {\n  // components: {\n  //   Plotly,\n  // },\n  data() {\n    return {\n      plotData: null,\n      current_file: null,\n      file_num: null,\n      keys: null, // key들의 리스트 - string[]\n      areNum: null, // 각 column 타입의 num 여부 리스트 - bool[]\n      lines: null, // data의 rows의 리스트(keys는 제거됨) - object[][]\n      chartType: \"scattergl\",\n      chartMode: \"markers\",\n      chartTitle: \"\",\n      selectedX: null, // 선택된 X축의 column index \"string\"\n      selectedY: null, // 선택된 Y축의 column index \"string\"\n      selectedName: null, // 선택된 Name의 column index\n      selectedCluster: null, // 선택된 Cluster의 column index\n      numClusterConstraint: 150, // Cluster가 너무 다양하면 성능에 저하가 생기므로 제한을 둠\n      clusterQuantile: 0,\n      clusterContrast: 1,\n      markerSize: 3, // 점의 사이즈\n      showGrid: false,\n      showZeroLine: true,\n      showLine: false,\n      showLabel: true,\n      numList: [{ name: \"None\", value: null }], // number type으로 x,y축에 들어가기 적합한 자료들의 option list\n      keyList: [{ name: \"None\", value: null }], // key list\n      clusterList: [{ name: \"None\", value: null, isTooVarious: null }], // cluster가 되기 적합한 list, unique한 자료수가 적은 column의 list\n      refreshOptionsLayout: true,\n      outputX: [],\n      outputY: [],\n      selectedIndices: [],\n      appliedSelectedIndices: [],\n      disableApplyButton: false,\n      scatterResult: null,\n    };\n  },\n  async mounted() {\n    Plotly.newPlot(\"plotly__scatter\", {\n      data: [{ type: this.chartType }],\n      layout: {\n        autosize: true,\n        automargin: true,\n        width: 600, // !--조정필요\n        height: 570, // !--조정필요\n        legend: {\n          itemsizing: \"constant\",\n          font: {\n            size: 15,\n          },\n        },\n        paper_bgcolor: \"#ffffff00\",\n        plot_bgcolor: \"#ffffff00\",\n      },\n      config: {\n        responsive: true,\n        scrollZoom: true,\n        displayModeBar: true,\n        displaylogo: false,\n      },\n    });\n    this.current_file = this.$store.getters.getCurrentFile.file;\n    const tmpIndices = this.$store.getters.getCurrentFile.selectedIndices;\n    if (tmpIndices != null) {\n      if (tmpIndices.length > 0) {\n        this.appliedSelectedIndices = tmpIndices;\n        this.disableApplyButton = true;\n      }\n    }\n    if (this.current_file !== \"\") {\n      const scatterResult = await getResult({\n        filename: this.current_file,\n      });\n      //백엔드에서 넘겨준 plot 데이터\n      // scatterResult.data;\n      // lines, keys, areNum 업데이트\n      this.scatterResult = scatterResult;\n      this.lines = scatterResult.data.split(\"\\n\").map((x) => x.split(\",\"));\n      this.keys = this.lines.splice(0, 1)[0];\n      this.keys.push(\"INDEX\");\n      // this.keys[0] = \"INDEX\"; // keys의 [0]을 \"\"로 받아오기 때문에 \"INDEX로 변환\"\n      this.areNum = this.lines[0].map((x) => !isNaN(x));\n\n      for (let i = 0; i < this.lines.length; i++) {\n        this.lines[i].push(i);\n      }\n\n      if (this.appliedSelectedIndices != null) {\n        if (this.appliedSelectedIndices.length > 0) {\n          this.lines = this.lines.filter((_, index) =>\n            this.appliedSelectedIndices.includes(index)\n          );\n          this.disableApplyButton = true;\n        }\n      }\n\n      this.numList = [{ name: \"None\", value: null }];\n      for (let i = 0; i < this.keys.length; i++) {\n        if (this.areNum[i] == true) {\n          this.numList.push({ name: this.keys[i], value: i });\n        }\n      }\n\n      this.keyList = [{ name: \"None\", value: null }];\n      for (let i = 0; i < this.keys.length; i++) {\n        this.keyList.push({ name: this.keys[i], value: i });\n      }\n\n      this.clusterList = [{ name: \"None\", value: null, isTooVarious: null }];\n      for (let i = 1; i < this.keys.length; i++) {\n        const countUnique = new Set(this.lines.map((x) => x[i])).size;\n        if (countUnique < this.numClusterConstraint) {\n          this.clusterList.push({\n            name: this.keys[i],\n            value: i,\n            isTooVarious: false,\n          });\n        } else {\n          this.clusterList.push({\n            name: this.keys[i],\n            value: i,\n            isTooVarious: true,\n          });\n        }\n      }\n\n      if (this.keys.indexOf(\"X\") != -1) {\n        this.selectedX = this.keys.indexOf(\"X\");\n      }\n      if (this.keys.indexOf(\"Y\") != -1) {\n        this.selectedY = this.keys.indexOf(\"Y\");\n      }\n      if (this.keys.indexOf(\"leiden\") != -1) {\n        this.selectedCluster = this.keys.indexOf(\"leiden\");\n      }\n\n      if (this.keys.indexOf(\"INDEX\") != -1) {\n        this.selectedName = this.keys.indexOf(\"INDEX\");\n      }\n\n      this.updateChart();\n      this.refreshOptionsLayout = false;\n    }\n  },\n  methods: {\n    // 차트 업데이트\n    updateChart() {\n      this.outputX = this.lines.map((x) => x[this.selectedX]);\n      this.outputY = this.lines.map((x) => x[this.selectedY]);\n      if (this.selectedCluster) {\n        if (this.clusterList[this.selectedCluster].isTooVarious == false) {\n          const clusterList = [\n            ...new Set(this.lines.map((x) => x[this.selectedCluster])),\n          ];\n          var traces = [];\n          // cluster 개수만큼 traces 생성\n          for (let i = 0; i < clusterList.length; i++) {\n            traces.push({\n              x: [],\n              y: [],\n              text: [],\n              name: clusterList[i] ?? \"Undefined\",\n              type: this.chartType,\n              mode: this.chartMode,\n              marker: { size: this.markerSize },\n            });\n          }\n          // lines를 순회하며 cluster에 맞는 traces에 x,y,text 값을 기입\n          for (let i = 0; i < this.lines.length; i++) {\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].x.push(this.lines[i][this.selectedX]);\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].y.push(this.lines[i][this.selectedY]);\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].text.push(this.lines[i][this.selectedName]);\n          }\n          Plotly.newPlot(\"plotly__scatter\", {\n            data: traces,\n            layout: {\n              title: this.chartTitle,\n              width: 600, // !--조정필요\n              height: 570, // !--조정필요\n              xaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              yaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              legend: {\n                itemsizing: \"constant\",\n                font: {\n                  size: 15,\n                },\n              },\n              paper_bgcolor: \"#ffffff00\",\n              plot_bgcolor: \"#ffffff00\",\n            },\n          });\n        } else {\n          Plotly.newPlot(\"plotly__scatter\", {\n            data: [\n              {\n                x: this.lines.map((x) => x[this.selectedX]),\n                y: this.lines.map((x) => x[this.selectedY]),\n                text: this.lines.map((x) => x[this.selectedName]),\n                type: this.chartType,\n                mode: this.chartMode,\n                marker: {\n                  size: this.markerSize,\n                  color: this.lines.map(\n                    (x) =>\n                      x[this.selectedCluster] * this.clusterContrast +\n                      this.clusterQuantile\n                  ),\n                },\n              },\n            ],\n            layout: {\n              title: this.chartTitle,\n              width: 600, // !--조정필요\n              height: 570, // !--조정필요\n              xaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              yaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              legend: {\n                itemsizing: \"constant\",\n                font: {\n                  size: 15,\n                },\n              },\n              paper_bgcolor: \"#ffffff00\",\n              plot_bgcolor: \"#ffffff00\",\n            },\n          });\n        }\n      } else {\n        Plotly.newPlot(\"plotly__scatter\", {\n          data: [\n            {\n              x: this.lines.map((x) => x[this.selectedX]),\n              y: this.lines.map((x) => x[this.selectedY]),\n              text: this.lines.map((x) => x[this.selectedName]),\n              type: this.chartType,\n              mode: this.chartMode,\n              marker: { size: this.markerSize },\n            },\n          ],\n          layout: {\n            title: this.chartTitle,\n            width: 600, // !--조정필요\n            height: 570, // !--조정필요\n            xaxis: {\n              showgrid: this.showGrid,\n              showticklabels: this.showLabel,\n              zeroline: this.showZeroLine,\n              showline: this.showLine,\n            },\n            yaxis: {\n              showgrid: this.showGrid,\n              showticklabels: this.showLabel,\n              zeroline: this.showZeroLine,\n              showline: this.showLine,\n            },\n            legend: {\n              itemsizing: \"constant\",\n              font: {\n                size: 15,\n              },\n            },\n            paper_bgcolor: \"#ffffff00\",\n            plot_bgcolor: \"#ffffff00\",\n          },\n        });\n      }\n      var graphDiv = document.getElementById(\"plotly__scatter\");\n      graphDiv.on(\"plotly_selected\", (eventData) => {\n        this.selectedIndices = [];\n        if (eventData.points.length > 0) {\n          for (let i = 0; i < eventData.points.length; i++) {\n            this.selectedIndices.push(parseInt(eventData.points[i].text));\n          }\n        }\n      });\n    },\n    setSelectX(event) {\n      this.selectedX = event.target.value;\n      this.updateChart();\n    },\n    setSelectY(event) {\n      this.selectedY = event.target.value;\n      this.updateChart();\n    },\n    setSelectName(event) {\n      this.selectedName = event.target.value;\n      this.updateChart();\n    },\n    setSelectCluster(event) {\n      this.selectedCluster = parseInt(event.target.value);\n      this.updateChart();\n    },\n    titleChangeFunc(event) {\n      this.chartTitle = event.target.value;\n      this.updateChart();\n    },\n    clusterQuantileMinus() {\n      this.clusterQuantile--;\n      this.updateChart();\n    },\n\n    clusterQuantilePlus() {\n      this.clusterQuantile++;\n      this.updateChart();\n    },\n    clusterQuantileReset() {\n      this.clusterQuantile = 0;\n      this.updateChart();\n    },\n    clusterContrastMinus() {\n      if (this.clusterContrast > 0) {\n        this.clusterContrast--;\n        this.updateChart();\n      }\n    },\n    clusterContrastPlus() {\n      this.clusterContrast++;\n      this.updateChart();\n    },\n    clusterContrastReset() {\n      this.clusterContrast = 1;\n      this.updateChart();\n    },\n    markerSizeMinus() {\n      if (this.markerSize > 1) {\n        this.markerSize--;\n        this.updateChart();\n      }\n    },\n    markerSizePlus() {\n      if (this.markerSize < 21) {\n        this.markerSize++;\n        this.updateChart();\n      }\n    },\n    markerSizeReset() {\n      this.markerSize = 2;\n      this.updateChart();\n    },\n    switchShowGrid() {\n      this.showGrid = !this.showGrid;\n      this.updateChart();\n    },\n    switchShowZeroLine() {\n      this.showZeroLine = !this.showZeroLine;\n      this.updateChart();\n    },\n    switchShowLine() {\n      this.showLine = !this.showLine;\n      this.updateChart();\n    },\n    switchShowLabel() {\n      this.showLabel = !this.showLabel;\n      this.updateChart();\n    },\n    downloadPlot() {\n      Plotly.downloadImage(\"plotly__scatter\", {\n        format: \"png\",\n        width: 600,\n        height: 570,\n        filename: \"CELLCRAFT_Plot\",\n      });\n    },\n    cellselect() {\n      if (this.selectedIndices.length > 0) {\n        this.$store.commit(\"setSelectedIndices\", [\n          this.keys[this.selectedCluster],\n          this.selectedIndices,\n        ]);\n        this.appliedSelectedIndices = this.selectedIndices;\n        this.lines = this.lines.filter((_, index) =>\n          this.appliedSelectedIndices.includes(index)\n        );\n        this.updateChart();\n        this.disableApplyButton = true;\n      }\n    },\n    resetSelect() {\n      this.$store.commit(\"setSelectedIndices\", [\"\", []]);\n      this.appliedSelectedIndices = null;\n      this.selectedIndices = [];\n      this.disableApplyButton = false;\n      this.markerSize = 3;\n      this.lines = this.scatterResult.data.split(\"\\n\").map((x) => x.split(\",\"));\n      this.keys = this.lines.splice(0, 1)[0];\n      this.keys.push(\"INDEX\");\n      // this.keys[0] = \"INDEX\"; // keys의 [0]을 \"\"로 받아오기 때문에 \"INDEX로 변환\"\n      this.areNum = this.lines[0].map((x) => !isNaN(x));\n\n      for (let i = 0; i < this.lines.length; i++) {\n        this.lines[i].push(i);\n      }\n\n      this.numList = [{ name: \"None\", value: null }];\n      for (let i = 0; i < this.keys.length; i++) {\n        if (this.areNum[i] == true) {\n          this.numList.push({ name: this.keys[i], value: i });\n        }\n      }\n\n      this.keyList = [{ name: \"None\", value: null }];\n      for (let i = 0; i < this.keys.length; i++) {\n        this.keyList.push({ name: this.keys[i], value: i });\n      }\n\n      this.clusterList = [{ name: \"None\", value: null, isTooVarious: null }];\n      for (let i = 1; i < this.keys.length; i++) {\n        const countUnique = new Set(this.lines.map((x) => x[i])).size;\n        if (countUnique < this.numClusterConstraint) {\n          this.clusterList.push({\n            name: this.keys[i],\n            value: i,\n            isTooVarious: false,\n          });\n        } else {\n          this.clusterList.push({\n            name: this.keys[i],\n            value: i,\n            isTooVarious: true,\n          });\n        }\n      }\n\n      if (this.keys.indexOf(\"X\") != -1) {\n        this.selectedX = this.keys.indexOf(\"X\");\n      }\n      if (this.keys.indexOf(\"Y\") != -1) {\n        this.selectedY = this.keys.indexOf(\"Y\");\n      }\n      if (this.keys.indexOf(\"leiden\") != -1) {\n        this.selectedCluster = this.keys.indexOf(\"leiden\");\n      }\n\n      if (this.keys.indexOf(\"INDEX\") != -1) {\n        this.selectedName = this.keys.indexOf(\"INDEX\");\n      }\n      this.updateChart();\n    },\n  },\n  computed: {\n    checkCurrentNode() {\n      return this.$store.getters.getCurrentNode;\n    },\n  },\n};\n</script>\n\n<style scoped>\n#layout {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n.plotly-layout {\n  width: 70%;\n  height: 95%;\n  /* background-color: blue; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 2.5%;\n  border-radius: 1rem;\n  box-sizing: border-box;\n  background-color: rgb(255, 255, 255);\n}\n.options-layout {\n  width: 25%;\n  height: 95%;\n  padding-right: 1%;\n  /* background-color: red; */\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  flex-direction: column;\n  z-index: 9997;\n}\n.options__textInput {\n  color: black;\n  padding: 5px;\n  left: 10px;\n  border-radius: 10px;\n  border-color: #e7eaff;\n  font-size: medium;\n  text-align: center;\n  margin-bottom: 5px;\n}\n.options__item {\n  /* margin: auto; */\n  font-weight: 600;\n  color: rgb(55, 55, 55);\n  /* padding: 2% 0; */\n  left: 10px;\n  margin-top: 15px;\n}\n.options__item__select {\n  position: absolute;\n  margin-top: -10px;\n  right: 10px;\n  padding: 5px;\n  border-radius: 8px;\n  width: 140px;\n  border-color: #e7eaff;\n  color: #545454;\n}\n.options__item__button__minus {\n  position: absolute;\n  right: 80px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__button__plus {\n  position: absolute;\n  right: 10px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__degree {\n  position: absolute;\n  right: 50px;\n}\nbutton {\n  background-color: #ffffff;\n  border: 1px solid #999999;\n  border-radius: 0.3rem;\n  color: #333333;\n  /* font-size: 1rem;\n  padding: 0.2rem 1rem; */\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.3s ease;\n  margin: 0.2rem 0.1rem;\n}\n\nbutton:hover {\n  background-color: #e7eaff;\n  border-color: #b3b3b3;\n}\n/* The switch - the box around the slider_button */\n.switch {\n  position: absolute;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n  margin-top: -5px;\n  right: 10px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider_button */\n.slider_button {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider_button:before {\n  position: absolute;\n  content: \"\";\n  height: 15px;\n  width: 15px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked + .slider_button {\n  background-color: #53b2ff;\n}\n\ninput:focus + .slider_button {\n  box-shadow: 0 0 1px #53b2ff;\n}\n\ninput:checked + .slider_button:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded slider_buttons */\n.slider_button.round {\n  border-radius: 34px;\n}\n\n.slider_button.round:before {\n  border-radius: 50%;\n}\n\n.downloadPlot_button {\n  position: absolute;\n  /* top: -0.2rem; */\n  right: 1.5rem;\n  margin-top: -0.2rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  opacity: 0.8;\n}\n.downloadPlot_button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n#apply-button {\n  background-color: #2d2fbf; /* 버튼 배경색 */\n  width: 8.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#apply-button:hover {\n  background-color: #4655ff; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n#apply-button:disabled {\n  background-color: #ccc; /* 비활성화 상태의 배경색 */\n  color: #666; /* 비활성화 상태의 글자색 */\n  cursor: not-allowed; /* 비활성화 상태에서의 커서 */\n}\n\n#reset-button {\n  background-color: #616161; /* 버튼 배경색 */\n  width: 3.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  /* margin-left: 10px; */\n  margin-right: 0.5rem;\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#reset-button:hover {\n  background-color: #797979; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterPlot.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./scatterPlot.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./scatterPlot.vue?vue&type=template&id=508f45d4&scoped=true\"\nimport script from \"./scatterPlot.vue?vue&type=script&lang=js\"\nexport * from \"./scatterPlot.vue?vue&type=script&lang=js\"\nimport style0 from \"./scatterPlot.vue?vue&type=style&index=0&id=508f45d4&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"508f45d4\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","_m","refreshOptionsLayout","_e","staticClass","on","$event","titleChangeFunc","_v","domProps","selectedX","setSelectX","_l","numList","item","index","key","value","_s","name","selectedY","setSelectY","selectedCluster","setSelectCluster","clusterList","require","markerSizeMinus","markerSize","markerSizePlus","downloadPlot","resetSelect","disableApplyButton","cellselect","staticRenderFns","data","plotData","current_file","file_num","keys","areNum","lines","chartType","chartMode","chartTitle","selectedName","numClusterConstraint","clusterQuantile","clusterContrast","showGrid","showZeroLine","showLine","showLabel","keyList","isTooVarious","outputX","outputY","selectedIndices","appliedSelectedIndices","scatterResult","mounted","Plotly","type","layout","autosize","automargin","width","height","legend","itemsizing","font","size","paper_bgcolor","plot_bgcolor","config","responsive","scrollZoom","displayModeBar","displaylogo","$store","getters","getCurrentFile","file","tmpIndices","length","getResult","filename","split","map","x","splice","push","isNaN","i","filter","_","includes","countUnique","Set","indexOf","updateChart","methods","traces","y","text","mode","marker","title","xaxis","showgrid","showticklabels","zeroline","showline","yaxis","color","graphDiv","document","getElementById","eventData","points","parseInt","event","target","setSelectName","clusterQuantileMinus","clusterQuantilePlus","clusterQuantileReset","clusterContrastMinus","clusterContrastPlus","clusterContrastReset","markerSizeReset","switchShowGrid","switchShowZeroLine","switchShowLine","switchShowLabel","format","commit","computed","checkCurrentNode","getCurrentNode","component"],"sourceRoot":""}