{"version":3,"file":"js/133.59d095b8.js","mappings":"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","sources":["webpack://cellcraft-vue/./src/components/modals/barPlot.vue","webpack://cellcraft-vue/src/components/modals/barPlot.vue","webpack://cellcraft-vue/./src/components/modals/barPlot.vue?06f2","webpack://cellcraft-vue/./src/components/modals/barPlot.vue?2351"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"layout\"}},[_vm._m(0),_c('div',{staticClass:\"options-layout\"},[_c('div',{staticClass:\"options__item\"},[_vm._v(\" sif  \"),_c('select',{staticClass:\"options__item__select\",domProps:{\"value\":_vm.selectedSif},on:{\"change\":function($event){return _vm.setSelectedSif($event)}}},_vm._l((_vm.resultSifs),function(sif){return _c('option',{key:sif,domProps:{\"value\":sif}},[_vm._v(\" \"+_vm._s(_vm._f(\"splitUnderScore\")(sif))+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_vm._v(\" Degree  \"),_c('select',{staticClass:\"options__item__select\",domProps:{\"value\":_vm.selectedDegree},on:{\"change\":function($event){return _vm.setSelectedDegree($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)])])])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"plotly-layout\"},[_c('div',{attrs:{\"id\":\"plotly-barplot\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"layout\">\n    <div class=\"plotly-layout\">\n      <div id=\"plotly-barplot\"></div>\n    </div>\n    <div class=\"options-layout\">\n      <div class=\"options__item\">\n        sif&nbsp;\n        <select\n          class=\"options__item__select\"\n          :value=\"selectedSif\"\n          @change=\"setSelectedSif($event)\"\n        >\n          <option v-for=\"sif in resultSifs\" :key=\"sif\" :value=\"sif\">\n            {{ sif | splitUnderScore }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        Degree&nbsp;\n        <select\n          class=\"options__item__select\"\n          :value=\"selectedDegree\"\n          @change=\"setSelectedDegree($event)\"\n        >\n          <option\n            v-for=\"(item, index) in numList\"\n            :key=\"index\"\n            :value=\"item.value\"\n          >\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getResultFileOne, getResultFile } from \"@/api/index\";\n// Importing the Plotly library\nimport Plotly from \"plotly.js-dist-min\";\n\nexport default {\n  data() {\n    return {\n      selectedDegree: 0,\n      numList: [\n        { name: \"Indegree\", value: 0 },\n        { name: \"Outdegree\", value: 2 },\n      ],\n      resultSifs: [],\n      selectedSif: \"\",\n      current_file: \"\",\n    };\n  },\n  name: \"PlotlyBarPlot\",\n\n  async mounted() {\n    // option_file_name.algorithmOptions.optionFilePath이 null이면 error 띄우기\n    const option_file_name = this.$store.getters.getCurrentLinkedNodes;\n\n    try {\n      this.current_file = this.filterAndAddSuffix(\n        this.$store.getters.getCurrentFile.file\n      );\n      const result = await getResultFile({\n        file_name: this.current_file,\n        option_file_name: option_file_name[0].algorithmOptions.optionFilePath,\n      });\n      const resultsList = result.data.result_files;\n      console.log(resultsList);\n      // resultsList에서 .sif 파일만 추출\n      // 추출할 때, \"_\"로 구분된 문자열을 배열로 변환하여 마지막 요소만 추출\n      // 마지막 요소가 \"sif\"인지 확인\n      // \"sif\"이면 배열을 문자열로 변환하여 resultSifs에 추가\n      for (var i = 0; i < resultsList.length; i++) {\n        const segments = resultsList[i].split(\"_\");\n        // segments 문자열 안에 sif가 포함되어 있으면 segments[segments.length - 1] push\n        if (segments[segments.length - 1].includes(\"sif\")) {\n          this.resultSifs.push(resultsList[i]);\n        }\n      }\n      this.selectedSif = this.resultSifs[0];\n    } catch (error) {\n      console.log(error);\n    }\n    await this.updatePlot(this.selectedDegree);\n  },\n  filters: {\n    // 문자열 안에 \"_\"가 포함되어 있으면 \"_\"로 구분된 문자열을 중 마지막 요소를만 반환\n    // \"_\"가 포함되어 있지 않으면 원래 문자열 반환\n    splitUnderScore(inputString) {\n      // Check if the inputString contains an underscore\n      if (inputString.includes(\"_\")) {\n        // \"_\"로 구분된 문자열을 배열로 변환\n        const segments = inputString.split(\"_\");\n        // 마지막 요소를 반환\n        const fileName = segments[segments.length - 1];\n        return fileName;\n      }\n      // If no underscore found, return the original string\n      return inputString;\n    },\n  },\n  methods: {\n    filterAndAddSuffix(inputString) {\n      // Check if the inputString contains an underscore\n      if (inputString.includes(\"_\")) {\n        // \"_\"로 구분된 문자열을 배열로 변환\n        const segments = inputString.split(\"_\");\n        // 마지막 두 요소를 제외한 나머지를 합침\n        const fileName = segments.slice(0, -2).join(\"_\") + \".h5ad\";\n        return fileName;\n      }\n      // If no underscore found, return the original string\n      return inputString;\n    },\n    async updatePlot(rowNum = 0) {\n      const algorithmResult = await getResultFileOne(this.selectedSif);\n      // 줄바꿈 문자(\"\\n\")를 기준으로 문자열을 분할하여 각 라인을 배열로 변환\n      var lines = algorithmResult.data.split(\"\\n\");\n\n      // 각 라인을 탭 문자(\"\\t\")를 기준으로 분할하여 2차원 배열 생성\n      var twoDimensionalList = lines.map(function (line) {\n        return line.split(\"\\t\");\n      });\n\n      // 결과 출력 (옵션)\n\n      var frequencyMap = {};\n\n      twoDimensionalList.forEach(function (row) {\n        var element = row[rowNum]; // 첫 번째 열의 요소\n\n        // 해당 요소가 frequencyMap에 이미 존재하면 카운트 증가, 없으면 1로 초기화\n        if (frequencyMap[element]) {\n          frequencyMap[element]++;\n        } else {\n          frequencyMap[element] = 1;\n        }\n      });\n\n      if (Object.prototype.hasOwnProperty.call(frequencyMap, \"\")) {\n        delete frequencyMap[\"\"];\n      }\n\n      // 결과 출력 (옵션)\n\n      // 객체를 키-값 쌍의 배열로 변환\n      var items = Object.keys(frequencyMap).map(function (key) {\n        return [key, frequencyMap[key]];\n      });\n\n      // 배열을 값(value)에 따라 내림차순으로 정렬\n      items.sort(function (first, second) {\n        return first[1] - second[1];\n      });\n\n      // 정렬된 배열을 다시 객체로 변환 (선택적)\n      var sortedFrequencyMap = {};\n      items.forEach(function (item) {\n        sortedFrequencyMap[item[0]] = item[1];\n      });\n\n      // 결과 출력\n\n      // Data for the bar plot\n      const data = [\n        {\n          x: items.map((item) => item[1]),\n          y: items.map((item) => item[0]),\n          type: \"bar\",\n          orientation: \"h\",\n        },\n      ];\n\n      // Layout configuration\n      const layout = {\n        // title: \"Simple Bar Plot\",\n        // xaxis: {\n        //   title: \"Categories\",\n        // },\n        // yaxis: {\n        //   title: \"Values\",\n        // },\n        width: 600, // !--조정필요\n        height: 570, // !--조정필요\n      };\n      const config = {\n        responsive: true,\n        scrollZoom: true,\n        displayModeBar: true,\n        displaylogo: false,\n      };\n      // Rendering the bar plot\n      Plotly.newPlot(\"plotly-barplot\", data, layout, config);\n    },\n    async setSelectedDegree(event) {\n      this.selectedDegree = event.target.value;\n      await this.updatePlot(this.selectedDegree);\n    },\n    async setSelectedSif(event) {\n      this.selectedSif = event.target.value;\n      await this.updatePlot(this.selectedDegree);\n    },\n  },\n};\n</script>\n\n<style scoped>\n#layout {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n.plotly-layout {\n  width: 70%;\n  height: 95%;\n  /* background-color: blue; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 1rem;\n  margin: 2.5%;\n  border-radius: 1rem;\n  box-sizing: border-box;\n  background-color: rgb(255, 255, 255);\n}\n.options-layout {\n  width: 25%;\n  height: 95%;\n  padding-right: 1%;\n  /* background-color: red; */\n  display: flex;\n  align-items: flex-start;\n  justify-content: center;\n  flex-direction: column;\n  z-index: 9997;\n}\n.options__textInput {\n  color: black;\n  padding: 5px;\n  left: 10px;\n  border-radius: 10px;\n  border-color: #e7eaff;\n  font-size: medium;\n  text-align: center;\n  margin-bottom: 5px;\n}\n.options__item {\n  /* margin: auto; */\n  font-weight: 600;\n  color: rgb(55, 55, 55);\n  /* padding: 2% 0; */\n  left: 10px;\n  margin-top: 15px;\n  text-transform: capitalize;\n}\n.options__item__select {\n  position: absolute;\n  margin-top: -10px;\n  right: 10px;\n  padding: 5px;\n  border-radius: 8px;\n  width: 140px;\n  border-color: #e7eaff;\n  color: #545454;\n}\n.options__item__button__minus {\n  position: absolute;\n  right: 80px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__button__plus {\n  position: absolute;\n  right: 10px;\n  width: 15px;\n  height: 15px;\n}\n.options__item__degree {\n  position: absolute;\n  right: 50px;\n}\nbutton {\n  background-color: #ffffff;\n  border: 1px solid #999999;\n  border-radius: 0.3rem;\n  color: #333333;\n  /* font-size: 1rem;\n  padding: 0.2rem 1rem; */\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.3s ease;\n  margin: 0.2rem 0.1rem;\n}\n\nbutton:hover {\n  background-color: #e7eaff;\n  border-color: #b3b3b3;\n}\n/* The switch - the box around the slider_button */\n.switch {\n  position: absolute;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n  margin-top: -5px;\n  right: 10px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider_button */\n.slider_button {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider_button:before {\n  position: absolute;\n  content: \"\";\n  height: 15px;\n  width: 15px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked + .slider_button {\n  background-color: #53b2ff;\n}\n\ninput:focus + .slider_button {\n  box-shadow: 0 0 1px #53b2ff;\n}\n\ninput:checked + .slider_button:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded slider_buttons */\n.slider_button.round {\n  border-radius: 34px;\n}\n\n.slider_button.round:before {\n  border-radius: 50%;\n}\n\n.downloadPlot_button {\n  position: absolute;\n  /* top: -0.2rem; */\n  right: 1.5rem;\n  margin-top: -0.2rem;\n  width: 1.5rem;\n  height: 1.5rem;\n  opacity: 0.8;\n}\n.downloadPlot_button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n#apply-button {\n  background-color: #2d2fbf; /* 버튼 배경색 */\n  width: 8.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#apply-button:hover {\n  background-color: #4655ff; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n#apply-button:disabled {\n  background-color: #ccc; /* 비활성화 상태의 배경색 */\n  color: #666; /* 비활성화 상태의 글자색 */\n  cursor: not-allowed; /* 비활성화 상태에서의 커서 */\n}\n\n#reset-button {\n  background-color: #616161; /* 버튼 배경색 */\n  width: 3.5rem;\n  color: white; /* 글자색 */\n  padding: 10px 0px; /* 상하 10px, 좌우 20px의 여백 */\n  border: none; /* 테두리 없앰 */\n  border-radius: 4px; /* 테두리 모서리 둥글게 */\n  cursor: pointer; /* 마우스 오버 시 커서 변경 */\n  font-size: 16px; /* 글자 크기 */\n  transition: background-color 0.3s; /* 배경색 변경시 트랜지션 효과 */\n  /* margin-left: 10px; */\n  margin-right: 0.5rem;\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#reset-button:hover {\n  background-color: #797979; /* 마우스 오버시 버튼의 배경색 변경 */\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./barPlot.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./barPlot.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./barPlot.vue?vue&type=template&id=507ef808&scoped=true\"\nimport script from \"./barPlot.vue?vue&type=script&lang=js\"\nexport * from \"./barPlot.vue?vue&type=script&lang=js\"\nimport style0 from \"./barPlot.vue?vue&type=style&index=0&id=507ef808&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"507ef808\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","_m","staticClass","_v","domProps","selectedSif","on","$event","setSelectedSif","_l","resultSifs","sif","key","_s","_f","selectedDegree","setSelectedDegree","numList","item","index","value","name","staticRenderFns","data","current_file","mounted","option_file_name","$store","getters","getCurrentLinkedNodes","filterAndAddSuffix","getCurrentFile","file","result","getResultFile","file_name","algorithmOptions","optionFilePath","resultsList","result_files","console","log","i","length","segments","split","includes","push","error","updatePlot","filters","splitUnderScore","inputString","fileName","methods","slice","join","rowNum","algorithmResult","getResultFileOne","lines","twoDimensionalList","map","line","frequencyMap","forEach","row","element","Object","prototype","hasOwnProperty","call","items","keys","sort","first","second","sortedFrequencyMap","x","y","type","orientation","layout","width","height","config","responsive","scrollZoom","displayModeBar","displaylogo","Plotly","event","target","component"],"sourceRoot":""}