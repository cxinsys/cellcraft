"use strict";(self["webpackChunkcellcraft_vue"]=self["webpackChunkcellcraft_vue"]||[]).push([[556],{4556:function(t,e,i){i.r(e),i.d(e,{default:function(){return d}});var a=function(){var t=this,e=t._self._c;return e("div",{staticClass:"layout_admin"},[e("div",{staticClass:"first-line"},[e("div",{staticClass:"header__text"},[t._v("Algorithms")]),e("div",{staticClass:"search"},[e("input",{directives:[{name:"model",rawName:"v-model",value:t.searchTerm,expression:"searchTerm"}],attrs:{type:"text",placeholder:"Search by name..."},domProps:{value:t.searchTerm},on:{input:function(e){e.target.composing||(t.searchTerm=e.target.value)}}})]),e("div",{staticClass:"page-size"},[e("label",{attrs:{for:"pageSize"}},[t._v("Page Size : ")]),e("select",{directives:[{name:"model",rawName:"v-model",value:t.pageSize,expression:"pageSize"}],attrs:{id:"pageSize"},on:{change:[function(e){var i=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){var e="_value"in t?t._value:t.value;return e}));t.pageSize=e.target.multiple?i:i[0]},t.updatePage]}},[e("option",{attrs:{value:"5"}},[t._v("5")]),e("option",{attrs:{value:"10"}},[t._v("10")]),e("option",{attrs:{value:"15"}},[t._v("15")]),e("option",{attrs:{value:"20"}},[t._v("20")]),e("option",{attrs:{value:"50"}},[t._v("50")])])])]),e("div",{staticClass:"second-line"},[e("div"),e("label",{staticClass:"upload-button"},[t._v(" ⇪ upload new algorithm "),e("input",{ref:"fileInput",staticStyle:{display:"none"},attrs:{type:"file"},on:{change:t.uploadFile}})])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{width:"70px"},on:{click:function(e){return t.sortTable("no")}}},[t._v(" No. "),e("span",{staticClass:"sort-icon"},[t._v(t._s(t.sortIcon("no")))])]),e("th",{on:{click:function(e){return t.sortTable("name")}}},[t._v(" name "),e("span",{staticClass:"sort-icon"},[t._v(t._s(t.sortIcon("name")))])]),e("th",[t._v("description")]),e("th",{on:{click:function(e){return t.sortTable("userId")}}},[t._v(" uploader id "),e("span",{staticClass:"sort-icon"},[t._v(t._s(t.sortIcon("userId")))])]),e("th",{on:{click:function(e){return t.sortTable("time")}}},[t._v(" uploaded date "),e("span",{staticClass:"sort-icon"},[t._v(t._s(t.sortIcon("time")))])]),e("th")])]),e("tbody",t._l(t.displayedalgorithms,(function(i){return e("tr",{key:i.no},[e("td",[t._v(t._s(i.no))]),e("td",[t._v(t._s(i.name))]),e("td",{staticClass:"description-cell"},[t._v(t._s(i.description))]),e("td",[t._v(t._s(i.userId))]),e("td",[t._v(t._s(i.time))]),e("button",{staticClass:"table-button",on:{click:function(e){return t.deleteAlgorithm(i)}}},[t._v(" delete algorithm ")])])})),0)]),e("div",{staticClass:"pagination"},[e("button",{attrs:{disabled:1===t.currentPage},on:{click:function(e){t.currentPage--}}},[t._v("Prev")]),e("span",[t._v(t._s(t.currentPage))]),e("button",{attrs:{disabled:t.currentPage===t.totalPages},on:{click:function(e){t.currentPage++}}},[t._v(" Next ")])]),this.editingAlgorithm?e("div",{staticClass:"layout-edit-setting"},[e("div",{attrs:{id:"layout"}},[e("div",{staticClass:"input-layout"},[e("div",{staticClass:"input-title"},[t._v("input node")]),t._l(t.editingAlgorithm["inputDescriptions"],(function(t){return e("div",{key:t.id,staticClass:"input-description",class:{linked:t.linked}},[e("input",{staticClass:"description-id",attrs:{type:"text","v-model":t.value},domProps:{value:t.id}}),e("input",{staticClass:"description-tooltip",attrs:{type:"text","v-model":t.value},domProps:{value:t.description}})])}))],2),e("div",{staticClass:"algorithm-layout"},[e("img",{staticClass:"algorithm-logo",attrs:{src:this.editingAlgorithm.logo,alt:"Fast Tenet"}}),e("div",{staticClass:"algorithm-parts"},t._l(t.editingAlgorithm["algorithmParts"],(function(i){return e("div",{key:i.id},[e("div",{staticClass:"part-title"},[t._v(t._s(i.id))]),t._l(i.parameters,(function(t){return e("div",{key:t.id},[e("div",{staticClass:"parameters"},[e("input",{staticClass:"description-id",attrs:{type:"text","v-model":t.value},domProps:{value:t.id}}),e("input",{staticClass:"parameter__textInput",class:{"red-text":!t.value},attrs:{type:"text",placeholder:t.default,"v-model":t.value,disabled:t.disabled}}),e("label",{staticClass:"switch",attrs:{"v-model":t.value},on:{click:function(e){t.disabled=!t.disabled}}},[e("input",{attrs:{type:"checkbox"}}),e("span",{staticClass:"slider_button round"})]),e("input",{staticClass:"description-tooltip",attrs:{type:"text","v-model":t.value},domProps:{value:t.description}})])])}))],2)})),0)]),e("div",{staticClass:"output-layout"},[e("div",{staticClass:"output-title"},[t._v("output node")]),t._l(t.editingAlgorithm["outputDescriptions"],(function(t){return e("div",{key:t.id,staticClass:"output-description",class:{linked:t.linked}},[e("input",{staticClass:"description-id",attrs:{type:"text","v-model":t.value},domProps:{value:t.id}}),e("input",{staticClass:"description-tooltip",attrs:{type:"text","v-model":t.value},domProps:{value:t.description}})])}))],2)])]):t._e()])},s=[],r={data(){return{editingAlgorithm:null,algorithms:[{no:0,userId:"cislab",name:"FastTenet",time:"2023-06-30",description:"temporary description",logo:i(2506),inputDescriptions:[{id:"Expression Data (dpath_exp_data)",description:"This is the path to the expression data file. It contains gene expression values for different samples or cells."},{id:"Trajectory Data (dpath_trj_data)",description:"This is the path to the trajectory data file. It represents the progression or trajectory of cells or samples in a biological process."},{id:"Branch Data (dpath_branch_data)",description:"This is the path to the branch or cell select data file. It specifies the branches or groups of cells in the trajectory."},{id:"TF Data (dpath_tf_data)",description:"This is the path to the transcription factor (TF) data file. It contains information about the transcription factors and their regulatory relationships."}],algorithmParts:[{id:"fasttenet parameters",parameters:[{id:"dpath_exp_data",description:"expression data path",default:"",value:"",required:!0,disabled:!0},{id:"dpath_trj_data",description:"trajectory data path",default:"",value:"",required:!0,disabled:!0},{id:"dpath_branch_data",description:"branch(cell select) data path",default:"",value:"",required:!0,disabled:!0},{id:"dpath_tf_data",description:"tf data path",default:"",value:"",required:!0,disabled:!0},{id:"spath_result_matrix",description:"spath_result_matrix",default:"None",value:"None",required:!1,disabled:!0},{id:"make_binary",description:"if True, make binary expression and node name file",default:"False",value:"False",required:!1,disabled:!1}]},{id:"worker run parameters",parameters:[{id:"device",description:"cpu or gpu",default:"gpu",value:"gpu",required:!1,disabled:!0},{id:"device_ids",description:"[0](cpu) or [list of whole gpu devices](gpu)",default:"[0, 1, 2, 3, 4, 5, 6, 7]",value:"[0, 1, 2, 3, 4, 5, 6, 7]",required:!1,disabled:!0},{id:"batch_size",description:"batch size",default:"2 ** 16",value:"2 ** 16",required:!0,disabled:!0},{id:"kp",description:"kernel percentail",default:"0.5",value:"0.5",required:!1,disabled:!1},{id:"percentile",description:"data crop percentile",default:"0",value:"0",required:!1,disabled:!1},{id:"win_length",description:"smoothe func window length parameter",default:"10",value:"10",required:!1,disabled:!1},{id:"polyorder",description:"smoothe func polyorder parameter",default:"3",value:"3",required:!1,disabled:!1}]}],outputDescriptions:[{id:"Result Matrix (spath_result_matrix)",description:"This is the path to the result matrix data file. It stores the results of the FastTENET algorithm, which includes the inferred regulatory relationships between genes."},{id:"Binary Expression and Node Name Files (make_binary)",description:"If the make_binary parameter is set to True, FastTENET generates binary expression and node name files. The binary expression file contains a binary representation of the gene expression data, while the node name file contains the names or identifiers of the genes."},{id:"GRN (Gene Regulatory Network) Files:",description:"The GRN files are generated by running the make_grn.py script. They include the inferred gene regulatory network based on the result matrix, node name file, and TF data. The output includes a file with a '.sif' extension, which represents the network structure, and a file with a '.outdegrees.txt' extension, which contains information about the outdegrees (number of outgoing connections) of each gene in the network."}]}],sortKey:"no",sortDirection:"dsc",pageSize:20,currentPage:1,searchTerm:""}},computed:{sortedAlgorithms(){const t=[...this.algorithms];return this.sortKey&&t.sort(((t,e)=>{const i=t[this.sortKey],a=e[this.sortKey];return i<a?"asc"===this.sortDirection?-1:1:i>a?"asc"===this.sortDirection?1:-1:0})),t},totalPages(){return Math.ceil(this.filteredalgorithms.length/this.pageSize)},displayedalgorithms(){const t=(this.currentPage-1)*this.pageSize,e=t+this.pageSize;return this.filteredalgorithms.slice(t,e)},filteredalgorithms(){if(this.searchTerm){const t=this.searchTerm.toLowerCase();return this.sortedAlgorithms.filter((e=>e.name.toLowerCase().includes(t)))}return this.sortedAlgorithms},showEditAlgorithmView(){return this.editingAlgorithm==[]}},methods:{sortTable(t){this.sortKey===t?this.sortDirection="asc"===this.sortDirection?"desc":"asc":(this.sortKey=t,this.sortDirection="asc")},sortIcon(t){return this.sortKey===t?"asc"===this.sortDirection?"▽▲":"▼△":"▽△"},resetSearch(){this.searchTerm=""},resetTagSearch(){this.searchTag=""},deleteAlgorithm(t){const e=this.algorithms.findIndex((e=>e.id===t.id));-1!==e&&this.algorithms.splice(e,1)},updatePage(){this.currentPage=1},getLinkUrl(){return"https://singlecell.broadinstitute.org/single_cell/study/SCP2221/primary-nasal-viral-infection-rewires-the-tissue-scale-memory-response-rechallenge-rm"},uploadFile(){},editAlgorithmSetting(t){this.editingAlgorithm=t}}},o=r,n=i(1656),l=(0,n.A)(o,a,s,!1,null,"47b933f0",null),d=l.exports},2506:function(t,e,i){t.exports=i.p+"img/fasttenet.f874bad9.png"}}]);
//# sourceMappingURL=556.09a5fa07.js.map