{"version":3,"file":"js/84.633a7c52.js","mappings":"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","sources":["webpack://cellcraft-vue/./src/components/modals/ScatterPlot.vue","webpack://cellcraft-vue/src/components/modals/ScatterPlot.vue","webpack://cellcraft-vue/./src/components/modals/ScatterPlot.vue?ec25","webpack://cellcraft-vue/./src/components/modals/ScatterPlot.vue?d650"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"layout\"}},[_vm._m(0),(!_vm.refreshOptionsLayout)?_c('div',{staticClass:\"options-layout\"},[_c('input',{staticClass:\"options__textInput\",attrs:{\"type\":\"text\",\"placeholder\":\"Title\"},on:{\"input\":function($event){return _vm.titleChangeFunc($event)}}}),_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"X - axis\")]),_c('select',{staticClass:\"options__item--select\",domProps:{\"value\":_vm.selectedX},on:{\"change\":function($event){return _vm.setSelectX($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"Y - axis\")]),_c('select',{staticClass:\"options__item--select\",domProps:{\"value\":_vm.selectedY},on:{\"change\":function($event){return _vm.setSelectY($event)}}},_vm._l((_vm.numList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"Group\")]),_c('select',{staticClass:\"options__item--select\",domProps:{\"value\":_vm.selectedCluster},on:{\"change\":function($event){return _vm.setSelectCluster($event)}}},_vm._l((_vm.clusterList),function(item,index){return _c('option',{key:index,domProps:{\"value\":item.value}},[_vm._v(\" \"+_vm._s(item.name)+\" \")])}),0)]),_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"Marker Size\")]),_c('div',{staticClass:\"options__buttons\"},[_c('img',{staticClass:\"options__item__button__minus\",attrs:{\"src\":require(\"@/assets/button_minus.png\"),\"alt\":\"-\"},on:{\"click\":_vm.markerSizeMinus}}),_c('label',{staticClass:\"options__item__degree\"},[_vm._v(_vm._s(_vm.markerSize))]),_c('img',{staticClass:\"options__item__button__plus\",attrs:{\"src\":require(\"@/assets/button_plus.png\"),\"alt\":\"-\"},on:{\"click\":_vm.markerSizePlus}})])]),_c('div',{staticClass:\"options__item\"},[_c('p',{staticClass:\"options__title\"},[_vm._v(\"Download Plot Image\")]),_c('img',{staticClass:\"downloadPlot_button\",attrs:{\"src\":require(\"@/assets/download.png\"),\"alt\":\"Save Plot\"},on:{\"click\":_vm.downloadPlot}})]),_c('div',{staticClass:\"options__item\"},[_c('button',{attrs:{\"id\":\"reset-button\"},on:{\"click\":_vm.resetSelect}},[_vm._v(\"reset\")]),_c('button',{attrs:{\"id\":\"apply-button\",\"disabled\":_vm.disableApplyButton},on:{\"click\":_vm.cellselect}},[_vm._v(\" \"+_vm._s(_vm.disableApplyButton ? \"Select Applied\" : \"Select Apply \")+\" \")])])]):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"plotly-layout\"},[_c('div',{attrs:{\"id\":\"plotly__scatter\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"layout\">\n    <div class=\"plotly-layout\">\n      <div id=\"plotly__scatter\"></div>\n    </div>\n    <div class=\"options-layout\" v-if=\"!refreshOptionsLayout\">\n      <input type=\"text\" placeholder=\"Title\" class=\"options__textInput\" @input=\"titleChangeFunc($event)\" />\n      <div class=\"options__item\">\n        <p class=\"options__title\">X - axis</p>\n        <select class=\"options__item--select\" :value=\"selectedX\" @change=\"setSelectX($event)\">\n          <option v-for=\"(item, index) in numList\" :key=\"index\" :value=\"item.value\">\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        <p class=\"options__title\">Y - axis</p>\n        <select class=\"options__item--select\" :value=\"selectedY\" @change=\"setSelectY($event)\">\n          <option v-for=\"(item, index) in numList\" :key=\"index\" :value=\"item.value\">\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n      <div class=\"options__item\">\n        <p class=\"options__title\">Group</p>\n        <select class=\"options__item--select\" :value=\"selectedCluster\" @change=\"setSelectCluster($event)\">\n          <option v-for=\"(item, index) in clusterList\" :key=\"index\" :value=\"item.value\">\n            {{ item.name }}\n          </option>\n        </select>\n      </div>\n\n      <div class=\"options__item\">\n        <p class=\"options__title\">Marker Size</p>\n        <div class=\"options__buttons\">\n          <img class=\"options__item__button__minus\" src=\"@/assets/button_minus.png\" alt=\"-\"\n            v-on:click=\"markerSizeMinus\" />\n          <label class=\"options__item__degree\">{{ markerSize }}</label>\n          <img class=\"options__item__button__plus\" src=\"@/assets/button_plus.png\" alt=\"-\" v-on:click=\"markerSizePlus\" />\n        </div>\n      </div>\n      <div class=\"options__item\">\n        <p class=\"options__title\">Download Plot Image</p>\n        <img class=\"downloadPlot_button\" src=\"@/assets/download.png\" alt=\"Save Plot\" @click=\"downloadPlot\" />\n      </div>\n      <div class=\"options__item\">\n        <button id=\"reset-button\" @click=\"resetSelect\">reset</button>\n        <button id=\"apply-button\" @click=\"cellselect\" :disabled=\"disableApplyButton\">\n          {{ disableApplyButton ? \"Select Applied\" : \"Select Apply \" }}\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getFileData, saveWorkflowNodeFile, readWorkflowNodeFile, deleteWorkflowNodeFile } from \"@/api/index\";\nimport Plotly from \"plotly.js-dist-min\";\n\nexport default {\n  // components: {\n  //   Plotly,\n  // },\n  data() {\n    return {\n      plotData: null,\n      current_file: null,\n      file_num: null,\n      keys: null, // key들의 리스트 - string[]\n      areNum: null, // 각 column 타입의 num 여부 리스트 - bool[]\n      lines: null, // data의 rows의 리스트(keys는 제거됨) - object[][]\n      chartType: \"scattergl\",\n      chartMode: \"markers\",\n      chartTitle: \"\",\n      selectedX: null, // 선택된 X축의 column index \"string\"\n      selectedY: null, // 선택된 Y축의 column index \"string\"\n      selectedName: null, // 선택된 Name의 column index\n      selectedCluster: null, // 선택된 Cluster의 column index\n      numClusterConstraint: 150, // Cluster가 너무 다양하면 성능에 저하가 생기므로 제한을 둠\n      clusterQuantile: 0,\n      clusterContrast: 1,\n      markerSize: 3, // 점의 사이즈\n      showGrid: false,\n      showZeroLine: true,\n      showLine: false,\n      showLabel: true,\n      numList: [{ name: \"None\", value: null }], // number type으로 x,y축에 들어가기 적합한 자료들의 option list\n      keyList: [{ name: \"None\", value: null }], // key list\n      clusterList: [{ name: \"None\", value: null, isTooVarious: null }], // cluster가 되기 적합한 list, unique한 자료수가 적은 column의 list\n      refreshOptionsLayout: true,\n      outputX: [],\n      outputY: [],\n      selectedIndices: [],\n      appliedSelectedIndices: [],\n      disableApplyButton: false,\n      scatterResult: null,\n      workflowId: this.$route.query.workflow_id,\n      nodeId: this.$route.query.node,\n    };\n  },\n  async mounted() {\n    try {\n      Plotly.newPlot(\"plotly__scatter\", {\n        data: [{ type: this.chartType }],\n        layout: {\n          autosize: true,\n          automargin: true,\n          width: 600, // !--조정필요\n          height: 570, // !--조정필요\n          legend: {\n            itemsizing: \"constant\",\n            font: {\n              size: 15,\n            },\n          },\n          paper_bgcolor: \"#ffffff00\",\n          plot_bgcolor: \"#ffffff00\",\n        },\n        config: {\n          responsive: true,\n          scrollZoom: true,\n          displayModeBar: true,\n          displaylogo: false,\n        },\n      });\n\n      // 저장된 selectedCluster 값을 가져오기\n      const nodeInfo = this.$store.getters.getWorkflowNodeInfo(this.nodeId);\n      if (nodeInfo.data && nodeInfo.data.selectedCluster !== undefined) {\n        this.selectedCluster = nodeInfo.data.selectedCluster;\n      }\n    } catch (error) {\n      console.error(\"Error initializing Plotly:\", error);\n    }\n\n    try {\n      this.current_file = this.$store.getters.getWorkflowNodeFileInfo(this.nodeId);\n    } catch (error) {\n      console.error(\"Error getting current file info:\", error);\n    }\n\n    let savedIndices;\n    try {\n      savedIndices = await readWorkflowNodeFile({\n        id: this.workflowId,\n        node_id: String(this.nodeId),\n        node_name: \"ScatterPlot\",\n        file_extension: \"json\",\n      });\n    } catch (error) {\n      console.error(\"Error reading workflow node file:\", error);\n    }\n\n    const tmpIndices = savedIndices?.data?.file_content;\n    console.log(tmpIndices);\n    console.log(savedIndices);\n    if (tmpIndices != null) {\n      if (tmpIndices.length > 0) {\n        this.appliedSelectedIndices = tmpIndices;\n        this.disableApplyButton = true;\n      }\n    }\n\n    if (this.current_file !== \"\") {\n      let scatterResult;\n      try {\n        scatterResult = await getFileData(this.current_file);\n      } catch (error) {\n        console.error(\"Error getting file data:\", error);\n      }\n\n      if (scatterResult) {\n        this.scatterResult = scatterResult.data;\n        console.log(this.scatterResult);\n\n        this.processScatterResult(this.scatterResult);\n\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines[i].push(i);\n        }\n\n        if (this.appliedSelectedIndices != null) {\n          if (this.appliedSelectedIndices.length > 0) {\n            this.lines = this.lines.filter((_, index) =>\n              this.appliedSelectedIndices.includes(index)\n            );\n            this.disableApplyButton = true;\n          }\n        }\n\n        this.numList = [{ name: \"None\", value: null }];\n        for (let i = 0; i < this.keys.length; i++) {\n          if (this.areNum[i] == true) {\n            this.numList.push({ name: this.keys[i], value: i });\n          }\n        }\n\n        this.keyList = [{ name: \"None\", value: null }];\n        for (let i = 0; i < this.keys.length; i++) {\n          this.keyList.push({ name: this.keys[i], value: i });\n        }\n\n        this.clusterList = [{ name: \"None\", value: null, isTooVarious: null }];\n        for (let i = 1; i < this.keys.length; i++) {\n          const countUnique = new Set(this.lines.map((x) => x[i])).size;\n          if (countUnique < this.numClusterConstraint) {\n            this.clusterList.push({\n              name: this.keys[i],\n              value: i,\n              isTooVarious: false,\n            });\n          } else {\n            this.clusterList.push({\n              name: this.keys[i],\n              value: i,\n              isTooVarious: true,\n            });\n          }\n        }\n\n        if (this.keys.indexOf(\"X\") != -1) {\n          this.selectedX = this.keys.indexOf(\"X\");\n        }\n        if (this.keys.indexOf(\"Y\") != -1) {\n          this.selectedY = this.keys.indexOf(\"Y\");\n        }\n        // if (this.keys.indexOf(\"leiden\") != -1) {\n        //   this.selectedCluster = this.keys.indexOf(\"leiden\");\n        // }\n        if (this.keys.indexOf(\"INDEX\") != -1) {\n          this.selectedName = this.keys.indexOf(\"INDEX\");\n        }\n\n        try {\n          this.updateChart();\n        } catch (error) {\n          console.error(\"Error updating chart:\", error);\n        }\n      }\n    }\n\n    this.refreshOptionsLayout = false;\n  },\n  methods: {\n    // 차트 업데이트\n    updateChart() {\n      this.outputX = this.lines.map((x) => x[this.selectedX]);\n      this.outputY = this.lines.map((x) => x[this.selectedY]);\n      if (this.selectedCluster) {\n        if (this.clusterList[this.selectedCluster].isTooVarious == false) {\n          const clusterList = [\n            ...new Set(this.lines.map((x) => x[this.selectedCluster])),\n          ];\n          var traces = [];\n          // cluster 개수만큼 traces 생성\n          for (let i = 0; i < clusterList.length; i++) {\n            traces.push({\n              x: [],\n              y: [],\n              text: [],\n              name: clusterList[i] ?? \"Undefined\",\n              type: this.chartType,\n              mode: this.chartMode,\n              marker: { size: this.markerSize },\n            });\n          }\n          // lines를 순회하며 cluster에 맞는 traces에 x,y,text 값을 기입\n          for (let i = 0; i < this.lines.length; i++) {\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].x.push(this.lines[i][this.selectedX]);\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].y.push(this.lines[i][this.selectedY]);\n            traces[\n              clusterList.indexOf(this.lines[i][this.selectedCluster])\n            ].text.push(this.lines[i][this.selectedName]);\n          }\n          Plotly.newPlot(\"plotly__scatter\", {\n            data: traces,\n            layout: {\n              title: this.chartTitle,\n              width: 600, // !--조정필요\n              height: 570, // !--조정필요\n              xaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              yaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              legend: {\n                itemsizing: \"constant\",\n                font: {\n                  size: 15,\n                },\n              },\n              paper_bgcolor: \"#ffffff00\",\n              plot_bgcolor: \"#ffffff00\",\n            },\n          });\n        } else {\n          Plotly.newPlot(\"plotly__scatter\", {\n            data: [\n              {\n                x: this.lines.map((x) => x[this.selectedX]),\n                y: this.lines.map((x) => x[this.selectedY]),\n                text: this.lines.map((x) => x[this.selectedName]),\n                type: this.chartType,\n                mode: this.chartMode,\n                marker: {\n                  size: this.markerSize,\n                  color: this.lines.map(\n                    (x) =>\n                      x[this.selectedCluster] * this.clusterContrast +\n                      this.clusterQuantile\n                  ),\n                },\n              },\n            ],\n            layout: {\n              title: this.chartTitle,\n              width: 600, // !--조정필요\n              height: 570, // !--조정필요\n              xaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              yaxis: {\n                showgrid: this.showGrid,\n                showticklabels: this.showLabel,\n                zeroline: this.showZeroLine,\n                showline: this.showLine,\n              },\n              legend: {\n                itemsizing: \"constant\",\n                font: {\n                  size: 15,\n                },\n              },\n              paper_bgcolor: \"#ffffff00\",\n              plot_bgcolor: \"#ffffff00\",\n            },\n          });\n        }\n      } else {\n        Plotly.newPlot(\"plotly__scatter\", {\n          data: [\n            {\n              x: this.lines.map((x) => x[this.selectedX]),\n              y: this.lines.map((x) => x[this.selectedY]),\n              text: this.lines.map((x) => x[this.selectedName]),\n              type: this.chartType,\n              mode: this.chartMode,\n              marker: { size: this.markerSize },\n            },\n          ],\n          layout: {\n            title: this.chartTitle,\n            width: 600, // !--조정필요\n            height: 570, // !--조정필요\n            xaxis: {\n              showgrid: this.showGrid,\n              showticklabels: this.showLabel,\n              zeroline: this.showZeroLine,\n              showline: this.showLine,\n            },\n            yaxis: {\n              showgrid: this.showGrid,\n              showticklabels: this.showLabel,\n              zeroline: this.showZeroLine,\n              showline: this.showLine,\n            },\n            legend: {\n              itemsizing: \"constant\",\n              font: {\n                size: 15,\n              },\n            },\n            paper_bgcolor: \"#ffffff00\",\n            plot_bgcolor: \"#ffffff00\",\n          },\n        });\n      }\n      var graphDiv = document.getElementById(\"plotly__scatter\");\n      graphDiv.on(\"plotly_selected\", (eventData) => {\n        this.selectedIndices = [];\n        if (eventData.points.length > 0) {\n          for (let i = 0; i < eventData.points.length; i++) {\n            this.selectedIndices.push(parseInt(eventData.points[i].text));\n          }\n        }\n      });\n    },\n    setSelectX(event) {\n      this.selectedX = event.target.value;\n      this.updateChart();\n    },\n    setSelectY(event) {\n      this.selectedY = event.target.value;\n      this.updateChart();\n    },\n    setSelectName(event) {\n      this.selectedName = event.target.value;\n      this.updateChart();\n    },\n    setSelectCluster(event) {\n      this.selectedCluster = parseInt(event.target.value);\n\n      // selectedCluster 값을 store에 저장\n      const dataObject = {\n        selectedCluster: this.selectedCluster\n      };\n      this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId: this.nodeId, dataObject });\n\n      this.updateChart();\n    },\n    titleChangeFunc(event) {\n      this.chartTitle = event.target.value;\n      this.updateChart();\n    },\n    clusterQuantileMinus() {\n      this.clusterQuantile--;\n      this.updateChart();\n    },\n\n    clusterQuantilePlus() {\n      this.clusterQuantile++;\n      this.updateChart();\n    },\n    clusterQuantileReset() {\n      this.clusterQuantile = 0;\n      this.updateChart();\n    },\n    clusterContrastMinus() {\n      if (this.clusterContrast > 0) {\n        this.clusterContrast--;\n        this.updateChart();\n      }\n    },\n    clusterContrastPlus() {\n      this.clusterContrast++;\n      this.updateChart();\n    },\n    clusterContrastReset() {\n      this.clusterContrast = 1;\n      this.updateChart();\n    },\n    markerSizeMinus() {\n      if (this.markerSize > 1) {\n        this.markerSize--;\n        this.updateChart();\n      }\n    },\n    markerSizePlus() {\n      if (this.markerSize < 21) {\n        this.markerSize++;\n        this.updateChart();\n      }\n    },\n    markerSizeReset() {\n      this.markerSize = 2;\n      this.updateChart();\n    },\n    switchShowGrid() {\n      this.showGrid = !this.showGrid;\n      this.updateChart();\n    },\n    switchShowZeroLine() {\n      this.showZeroLine = !this.showZeroLine;\n      this.updateChart();\n    },\n    switchShowLine() {\n      this.showLine = !this.showLine;\n      this.updateChart();\n    },\n    switchShowLabel() {\n      this.showLabel = !this.showLabel;\n      this.updateChart();\n    },\n    downloadPlot() {\n      Plotly.downloadImage(\"plotly__scatter\", {\n        format: \"png\",\n        width: 600,\n        height: 570,\n        filename: \"CELLCRAFT_Plot\",\n      });\n    },\n    async cellselect() {\n      if (this.selectedIndices.length > 0) {\n        // this.$store.commit(\"setSelectedIndices\", [\n        //   this.keys[this.selectedCluster],\n        //   this.selectedIndices,\n        // ]);\n        const selectIndicesInfo = await saveWorkflowNodeFile({\n          id: this.workflowId,\n          node_id: String(this.nodeId),\n          node_name: \"ScatterPlot\",\n          file_content: this.selectedIndices,\n          file_extension: \"json\",\n        });\n        console.log(selectIndicesInfo.data);\n        const dataObject = {\n          lasso_file_path: selectIndicesInfo.data.file_path\n        }\n        this.$store.commit(\"setWorkflowNodeDataObject\", { nodeId: this.nodeId, dataObject });\n        this.appliedSelectedIndices = this.selectedIndices;\n        this.lines = this.lines.filter((_, index) =>\n          this.appliedSelectedIndices.includes(index)\n        );\n        this.updateChart();\n        this.disableApplyButton = true;\n      }\n    },\n    async resetSelect() {\n      try {\n        // this.$store.commit(\"setSelectedIndices\", [\"\", []]);\n        const resetIndicesInfo = await deleteWorkflowNodeFile({\n          id: this.workflowId,\n          node_id: String(this.nodeId),\n          node_name: \"ScatterPlot\",\n          file_extension: \"json\",\n        });\n        console.log(resetIndicesInfo);\n        this.appliedSelectedIndices = null;\n        this.selectedIndices = [];\n        this.disableApplyButton = false;\n        this.markerSize = 3;\n\n        this.processScatterResult(this.scatterResult);\n\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines[i].push(i);\n        }\n\n        this.numList = [{ name: \"None\", value: null }];\n        for (let i = 0; i < this.keys.length; i++) {\n          if (this.areNum[i] == true) {\n            this.numList.push({ name: this.keys[i], value: i });\n          }\n        }\n\n        this.keyList = [{ name: \"None\", value: null }];\n        for (let i = 0; i < this.keys.length; i++) {\n          this.keyList.push({ name: this.keys[i], value: i });\n        }\n\n        this.clusterList = [{ name: \"None\", value: null, isTooVarious: null }];\n        for (let i = 1; i < this.keys.length; i++) {\n          const countUnique = new Set(this.lines.map((x) => x[i])).size;\n          if (countUnique < this.numClusterConstraint) {\n            this.clusterList.push({\n              name: this.keys[i],\n              value: i,\n              isTooVarious: false,\n            });\n          } else {\n            this.clusterList.push({\n              name: this.keys[i],\n              value: i,\n              isTooVarious: true,\n            });\n          }\n        }\n\n        if (this.keys.indexOf(\"X\") != -1) {\n          this.selectedX = this.keys.indexOf(\"X\");\n        }\n        if (this.keys.indexOf(\"Y\") != -1) {\n          this.selectedY = this.keys.indexOf(\"Y\");\n        }\n        // if (this.keys.indexOf(\"leiden\") != -1) {\n        //   this.selectedCluster = this.keys.indexOf(\"leiden\");\n        // }\n\n        if (this.keys.indexOf(\"INDEX\") != -1) {\n          this.selectedName = this.keys.indexOf(\"INDEX\");\n        }\n        this.updateChart();\n      } catch (error) {\n        console.error(\"Error resetting selection:\", error);\n      }\n    },\n    processScatterResult(scatterResult) {\n      // Extract keys from the first object\n      this.keys = Object.keys(scatterResult[0]);\n      this.keys.push(\"INDEX\");\n\n      // Map the scatterResult to an array of values and add the index\n      this.lines = scatterResult.map((item, index) => {\n        const values = Object.values(item);\n        values.push(index);\n        return values;\n      });\n\n      // Determine which columns are numeric\n      this.areNum = this.lines[0].map((x) => !isNaN(x));\n    }\n  },\n};\n</script>\n\n<style scoped>\n#layout {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n}\n\n.plotly-layout {\n  width: 70%;\n  height: 95%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  border-radius: 1rem;\n  margin: 1%;\n  box-sizing: border-box;\n  background-color: rgb(255, 255, 255);\n}\n\n.options-layout {\n  width: 30%;\n  height: 95%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  gap: 0.5rem;\n  z-index: 9997;\n}\n\n.options__textInput {\n  width: 80%;\n  padding: 0.5rem;\n  color: black;\n  border-radius: 0.5rem;\n  border: 1px solid #e7eaff;\n  font-size: medium;\n  text-align: center;\n}\n\n.options__item {\n  width: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.options__title {\n  font-weight: 600;\n  color: rgb(55, 55, 55);\n}\n\n.options__item--select {\n  width: 8rem;\n  padding: 0.5rem;\n  border-radius: 8px;\n  border-color: #e7eaff;\n  color: #545454;\n}\n\n.options__buttons {\n  width: 7rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n.options__item__button__minus,\n.options__item__button__plus,\n.options__item__degree {\n  width: 1rem;\n  height: 1rem;\n}\n\nbutton {\n  background-color: #ffffff;\n  border: 1px solid #999999;\n  border-radius: 0.3rem;\n  color: #333333;\n  /* font-size: 1rem;\n  padding: 0.2rem 1rem; */\n  text-align: center;\n  text-decoration: none;\n  transition: background-color 0.3s ease;\n  margin: 0.2rem 0.1rem;\n}\n\nbutton:hover {\n  background-color: #e7eaff;\n  border-color: #b3b3b3;\n}\n\n/* The switch - the box around the slider_button */\n.switch {\n  position: absolute;\n  display: inline-block;\n  width: 50px;\n  height: 24px;\n  margin-top: -5px;\n  right: 10px;\n}\n\n/* Hide default HTML checkbox */\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n/* The slider_button */\n.slider_button {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\n.slider_button:before {\n  position: absolute;\n  content: \"\";\n  height: 15px;\n  width: 15px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  -webkit-transition: 0.4s;\n  transition: 0.4s;\n}\n\ninput:checked+.slider_button {\n  background-color: #53b2ff;\n}\n\ninput:focus+.slider_button {\n  box-shadow: 0 0 1px #53b2ff;\n}\n\ninput:checked+.slider_button:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded slider_buttons */\n.slider_button.round {\n  border-radius: 34px;\n}\n\n.slider_button.round:before {\n  border-radius: 50%;\n}\n\n.downloadPlot_button {\n  width: 1.5rem;\n  height: 1.5rem;\n  opacity: 0.8;\n}\n\n.downloadPlot_button:hover {\n  opacity: 1;\n  cursor: pointer;\n}\n\n#apply-button {\n  background-color: #2d2fbf;\n  /* 버튼 배경색 */\n  width: 9rem;\n  color: white;\n  /* 글자색 */\n  padding: 10px 0px;\n  /* 상하 10px, 좌우 20px의 여백 */\n  border: none;\n  /* 테두리 없앰 */\n  border-radius: 4px;\n  /* 테두리 모서리 둥글게 */\n  cursor: pointer;\n  /* 마우스 오버 시 커서 변경 */\n  font-size: 16px;\n  /* 글자 크기 */\n  transition: background-color 0.3s;\n  /* 배경색 변경시 트랜지션 효과 */\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.4);\n}\n\n#apply-button:hover {\n  background-color: #4655ff;\n  /* 마우스 오버시 버튼의 배경색 변경 */\n}\n\n#apply-button:disabled {\n  background-color: #ccc;\n  /* 비활성화 상태의 배경색 */\n  color: #666;\n  /* 비활성화 상태의 글자색 */\n  cursor: not-allowed;\n  /* 비활성화 상태에서의 커서 */\n}\n\n#reset-button {\n  background-color: #616161;\n  /* 버튼 배경색 */\n  width: 4rem;\n  color: white;\n  /* 글자색 */\n  padding: 10px 0px;\n  /* 상하 10px, 좌우 20px의 여백 */\n  border: none;\n  /* 테두리 없앰 */\n  border-radius: 4px;\n  /* 테두리 모서리 둥글게 */\n  cursor: pointer;\n  /* 마우스 오버 시 커서 변경 */\n  font-size: 16px;\n  /* 글자 크기 */\n  transition: background-color 0.3s;\n  /* 배경색 변경시 트랜지션 효과 */\n  margin-right: 0.5rem;\n}\n\n#reset-button:hover {\n  background-color: #797979;\n  /* 마우스 오버시 버튼의 배경색 변경 */\n}\n</style>\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlot.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ScatterPlot.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./ScatterPlot.vue?vue&type=template&id=1191a523&scoped=true\"\nimport script from \"./ScatterPlot.vue?vue&type=script&lang=js\"\nexport * from \"./ScatterPlot.vue?vue&type=script&lang=js\"\nimport style0 from \"./ScatterPlot.vue?vue&type=style&index=0&id=1191a523&prod&scoped=true&lang=css\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1191a523\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","_m","refreshOptionsLayout","_e","staticClass","on","$event","titleChangeFunc","_v","domProps","selectedX","setSelectX","_l","numList","item","index","key","value","_s","name","selectedY","setSelectY","selectedCluster","setSelectCluster","clusterList","require","markerSizeMinus","markerSize","markerSizePlus","downloadPlot","resetSelect","disableApplyButton","cellselect","staticRenderFns","data","plotData","current_file","file_num","keys","areNum","lines","chartType","chartMode","chartTitle","selectedName","numClusterConstraint","clusterQuantile","clusterContrast","showGrid","showZeroLine","showLine","showLabel","keyList","isTooVarious","outputX","outputY","selectedIndices","appliedSelectedIndices","scatterResult","workflowId","$route","query","workflow_id","nodeId","node","mounted","Plotly","type","layout","autosize","automargin","width","height","legend","itemsizing","font","size","paper_bgcolor","plot_bgcolor","config","responsive","scrollZoom","displayModeBar","displaylogo","nodeInfo","$store","getters","getWorkflowNodeInfo","undefined","error","console","getWorkflowNodeFileInfo","savedIndices","readWorkflowNodeFile","id","node_id","String","node_name","file_extension","tmpIndices","file_content","log","length","getFileData","processScatterResult","i","push","filter","_","includes","countUnique","Set","map","x","indexOf","updateChart","methods","traces","y","text","mode","marker","title","xaxis","showgrid","showticklabels","zeroline","showline","yaxis","color","graphDiv","document","getElementById","eventData","points","parseInt","event","target","setSelectName","dataObject","commit","clusterQuantileMinus","clusterQuantilePlus","clusterQuantileReset","clusterContrastMinus","clusterContrastPlus","clusterContrastReset","markerSizeReset","switchShowGrid","switchShowZeroLine","switchShowLine","switchShowLabel","format","filename","selectIndicesInfo","saveWorkflowNodeFile","lasso_file_path","file_path","resetIndicesInfo","deleteWorkflowNodeFile","Object","values","isNaN","component"],"sourceRoot":""}